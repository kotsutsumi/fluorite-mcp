name: Auto Release & Publish

on:
  push:
    branches: [main]
    paths: ['package.json']

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
      is-prerelease: ${{ steps.check.outputs.prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version change
        id: check
        run: |
          echo "Checking for version changes in package.json..."
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from git
          if git show HEAD~1:package.json > /dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            echo "Previous version: $PREVIOUS_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              
              # Check if it's a prerelease (contains alpha, beta, rc, etc.)
              if echo "$CURRENT_VERSION" | grep -E "(alpha|beta|rc|dev|pre)" > /dev/null; then
                echo "prerelease=true" >> $GITHUB_OUTPUT
              else
                echo "prerelease=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ No version change detected"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Cannot compare with previous version (first commit?)"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

  validate-release:
    name: Validate Release Candidate
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive validation
        run: |
          echo "🔍 Running comprehensive validation for release candidate..."
          
          # Build validation
          echo "📦 Building project..."
          npm run build
          
          # Test validation
          echo "🧪 Running tests..."
          npm run test:unit
          
          # Build verification
          echo "✅ Verifying build..."
          npm run build:check
          
          # Documentation validation
          echo "📚 Building documentation..."
          npm run docs:build
          
          echo "✅ All validation checks passed!"

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "Commits since $LAST_TAG:" > CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "Initial release" > CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          echo "Generated changelog:"
          cat CHANGELOG.md
          
          # Make changelog available as output
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, validate-release]
    if: needs.check-version.outputs.version-changed == 'true'
    
    outputs:
      release-created: ${{ steps.release.outputs.created }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.check-version.outputs.new-version }}';
            const isPrerelease = '${{ needs.check-version.outputs.is-prerelease }}' === 'true';
            
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${version}`,
                name: `Release v${version}`,
                body: `## Fluorite MCP v${version}
                
🚀 **Automatic Release**

### What's New in v${version}
- Enhanced documentation and feature improvements
- 219+ enterprise-grade spike templates
- Comprehensive static analysis capabilities
- Automated CI/CD workflows
- Bilingual documentation support

### Quick Start
\`\`\`bash
npm install -g fluorite-mcp
\`\`\`

### Documentation
- 📚 [Full Documentation](https://kotsutsumi.github.io/fluorite-mcp/)
- 🧪 [Spike Templates](https://kotsutsumi.github.io/fluorite-mcp/spike-templates)
- 🛡️ [Static Analysis](https://kotsutsumi.github.io/fluorite-mcp/static-analysis)

### Changes
\`\`\`
${context.payload.head_commit.message}
\`\`\`

---
*🤖 Auto-generated release by GitHub Actions*`,
                draft: false,
                prerelease: isPrerelease,
                target_commitish: 'main'
              });
              
              console.log(`✅ Created release: ${response.data.html_url}`);
              core.setOutput('created', 'true');
              core.setOutput('url', response.data.html_url);
              
            } catch (error) {
              console.error('❌ Failed to create release:', error);
              core.setFailed(`Failed to create release: ${error.message}`);
            }

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-version, validate-release, create-release]
    if: |
      needs.check-version.outputs.version-changed == 'true' &&
      needs.create-release.outputs.release-created == 'true'
    
    permissions:
      contents: read
      id-token: write
      
    env:
      NODE_OPTIONS: "--max_old_space_size=6144"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: |
          echo "🏗️ Building for production release..."
          npm run build
          
          # Verify the build
          echo "✅ Verifying production build..."
          npm run build:check

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📦 Publishing fluorite-mcp v${{ needs.check-version.outputs.new-version }} to NPM..."
          
          # Set NPM configuration
          npm config set //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
          npm config set access public
          
          # Publish with provenance
          npm publish --provenance --access public
          
          echo "✅ Successfully published to NPM!"
          echo "📦 Package: https://www.npmjs.com/package/fluorite-mcp"

  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [check-version, create-release, publish-npm]
    if: |
      needs.check-version.outputs.version-changed == 'true' &&
      needs.create-release.outputs.release-created == 'true'
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 Release v${{ needs.check-version.outputs.new-version }} completed successfully!"
          echo ""
          echo "📋 Release Summary:"
          echo "   Version: v${{ needs.check-version.outputs.new-version }}"
          echo "   Prerelease: ${{ needs.check-version.outputs.is-prerelease }}"
          echo "   GitHub Release: ✅ Created"
          echo "   NPM Package: ✅ Published"
          echo ""
          echo "🔗 Links:"
          echo "   📦 NPM: https://www.npmjs.com/package/fluorite-mcp"
          echo "   📚 Docs: https://kotsutsumi.github.io/fluorite-mcp/"
          echo "   🐙 GitHub: https://github.com/kotsutsumi/fluorite-mcp"

      - name: Update README badge
        run: |
          echo "🏷️ Version v${{ needs.check-version.outputs.new-version }} is now live!"

  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [check-version, validate-release, create-release, publish-npm]
    if: |
      failure() && 
      needs.check-version.outputs.version-changed == 'true'
    
    steps:
      - name: Failure notification
        run: |
          echo "❌ Release process failed for v${{ needs.check-version.outputs.new-version }}"
          echo ""
          echo "🔍 Check the following:"
          echo "   - Build and test validation"
          echo "   - NPM_TOKEN secret configuration"
          echo "   - GitHub permissions"
          echo "   - Package version uniqueness"
          echo ""
          echo "🛠️ Manual recovery steps:"
          echo "   1. Fix the issue"
          echo "   2. Push a new commit with version bump"
          echo "   3. The workflow will automatically retry"