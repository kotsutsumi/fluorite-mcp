{
  "items": [
    { "id": "strike-express-cache-busting-headers", "name": "Express Cache-Busting Headers", "stack": ["node","express"], "tags": ["backend","cache"], "files": [{ "path": "server.js", "template": "// express cache-busting headers skeleton\n" }] },
    { "id": "strike-koa-rate-limit-redis", "name": "Koa Rate Limit (Redis)", "stack": ["node","koa","redis"], "tags": ["backend","security"], "files": [{ "path": "server.js", "template": "// koa rate limit via redis skeleton\n" }] },
    { "id": "strike-fastify-helmet-security", "name": "Fastify Helmet Security", "stack": ["node","fastify","helmet"], "tags": ["backend","security"], "files": [{ "path": "server.js", "template": "// fastify helmet security skeleton\n" }] },
    { "id": "strike-go-chi-csrf-middleware", "name": "Go chi CSRF Middleware", "stack": ["go","chi"], "tags": ["backend","security"], "files": [{ "path": "main.go", "template": "package main\n// chi csrf middleware skeleton\nfunc main(){}\n" }] },
    { "id": "strike-deno-oak-request-logging", "name": "Deno Oak Request Logging", "stack": ["deno","oak"], "tags": ["backend","logs"], "files": [{ "path": "main.ts", "template": "// oak request logging skeleton\n" }] },
    { "id": "strike-hono-multipart-upload", "name": "Hono Multipart Upload", "stack": ["hono"], "tags": ["backend","upload"], "files": [{ "path": "server.ts", "template": "// hono multipart upload skeleton\n" }] },

    { "id": "strike-nextjs-app-route-rpc", "name": "Next.js App Route RPC", "stack": ["nextjs"], "tags": ["frontend","api","rpc"], "files": [{ "path": "app/api/rpc/route.ts", "template": "// app route rpc skeleton\n" }] },
    { "id": "strike-nuxt3-server-stream-sse", "name": "Nuxt3 Server Stream (SSE)", "stack": ["nuxt","nitro"], "tags": ["frontend","api","stream"], "files": [{ "path": "server/api/sse.get.ts", "template": "// sse stream skeleton\n" }] },
    { "id": "strike-sveltekit-route-guards", "name": "SvelteKit Route Guards Patterns", "stack": ["sveltekit"], "tags": ["frontend","routing","auth"], "files": [{ "path": "src/lib/guards.ts", "template": "// route guards patterns skeleton\n" }] },
    { "id": "strike-angular-http-auth-interceptor", "name": "Angular HTTP Auth Interceptor", "stack": ["angular"], "tags": ["frontend","http","auth"], "files": [{ "path": "src/app/auth.interceptor.ts", "template": "// auth header interceptor skeleton\n" }] },
    { "id": "strike-solid-data-router-query", "name": "Solid Data Router + Query", "stack": ["solid"], "tags": ["frontend","router","data"], "files": [{ "path": "src/dataRouter.tsx", "template": "// solid data router + query skeleton\n" }] },

    { "id": "strike-otel-node-logs-loglevel", "name": "OTel Node Logs with Loglevel", "stack": ["opentelemetry"], "tags": ["observability","logs"], "files": [{ "path": "otel/loglevel.js", "template": "// logs with loglevel mapping skeleton\n" }] },
    { "id": "strike-collector-batch-processor", "name": "Collector Batch Processor", "stack": ["opentelemetry","collector"], "tags": ["observability","processor"], "files": [{ "path": "otel/batch.yaml", "template": "processors: { batch: {} }\n" }] },
    { "id": "strike-grafana-jsonnet-templates", "name": "Grafana Jsonnet Templates", "stack": ["grafana","jsonnet"], "tags": ["observability","dashboards"], "files": [{ "path": "grafana/jsonnet/README.md", "template": "# jsonnet templates notes\n" }] },

    { "id": "strike-oauth2-mtls-client-auth", "name": "OAuth2 mTLS Client Auth", "stack": ["oauth2","mtls"], "tags": ["security","auth"], "files": [{ "path": "auth/mtls.md", "template": "# mtls client auth skeleton\n" }] },
    { "id": "strike-jwt-audience-claims", "name": "JWT Audience Claims Patterns", "stack": ["jwt"], "tags": ["security","jwt"], "files": [{ "path": "security/aud_claims.md", "template": "# audience claims patterns\n" }] },
    { "id": "strike-opa-bundle-signing-keys-rotate", "name": "OPA Signing Keys Rotation", "stack": ["opa"], "tags": ["security","policy"], "files": [{ "path": "policy/signing_keys_rotate.md", "template": "# rotate signing keys\n" }] },

    { "id": "strike-kafka-consumer-pause-resume", "name": "Kafka Consumer Pause/Resume", "stack": ["kafka"], "tags": ["stream","flow"], "files": [{ "path": "kafka/pause_resume.md", "template": "# pause/resume patterns\n" }] },
    { "id": "strike-nats-js-stream-partitions", "name": "NATS JS Stream Partitions", "stack": ["nats"], "tags": ["messaging","stream"], "files": [{ "path": "nats/partitions.md", "template": "# stream partitions notes\n" }] },
    { "id": "strike-sqs-deduplication-id-strategy", "name": "SQS Deduplication ID Strategy", "stack": ["aws","sqs"], "tags": ["queue","dedup"], "files": [{ "path": "aws/dedup_id.md", "template": "# deduplication id patterns\n" }] },

    { "id": "strike-actions-reusable-slack-notify", "name": "Actions Reusable Slack Notify", "stack": ["github","actions","slack"], "tags": ["ci","notify"], "files": [{ "path": ".github/workflows/slack-notify.yml", "template": "name: SlackNotify\non: workflow_call\n" }] },
    { "id": "strike-terraform-workspace-promotion", "name": "Terraform Workspace Promotion", "stack": ["terraform"], "tags": ["infra","promotion"], "files": [{ "path": "docs/workspace_promotion.md", "template": "# workspace promotion\n" }] },
    { "id": "strike-helm-env-values-matrix", "name": "Helm Env Values Matrix", "stack": ["helm"], "tags": ["ops","env"], "files": [{ "path": "helm/values-matrix.md", "template": "# env values matrix\n" }] },

    { "id": "strike-msw-conditional-handlers", "name": "MSW Conditional Handlers", "stack": ["msw"], "tags": ["test"], "files": [{ "path": "src/mocks/conditional.ts", "template": "// conditional handlers skeleton\n" }] },
    { "id": "strike-playwright-snapshots-advanced", "name": "Playwright Snapshots Advanced", "stack": ["playwright"], "tags": ["test"], "files": [{ "path": "tests/snapshots_advanced.md", "template": "# advanced snapshots\n" }] },
    { "id": "strike-jest-workers-max-concurrency", "name": "Jest Workers Max Concurrency", "stack": ["jest"], "tags": ["test","perf"], "files": [{ "path": "jest.config.ts", "template": "// maxWorkers config skeleton\n" }] },

    { "id": "strike-airflow-s3-sensors", "name": "Airflow S3 Sensors", "stack": ["airflow","aws"], "tags": ["data","sensors"], "files": [{ "path": "dags/s3_sensors.py", "template": "# s3 sensors skeleton\n" }] },
    { "id": "strike-dbt-packages-management", "name": "dbt Packages Management", "stack": ["dbt"], "tags": ["data","deps"], "files": [{ "path": "packages.yml", "template": "# dbt packages examples\n" }] },
    { "id": "strike-bigquery-multi-regions-datasets", "name": "BigQuery Multi Regions Datasets", "stack": ["gcp","bigquery"], "tags": ["data","regions"], "files": [{ "path": "docs/multi_regions.md", "template": "# multi regions datasets\n" }] },

    { "id": "strike-aws-s3-eventbridge-notifications", "name": "AWS S3 EventBridge Notifications", "stack": ["aws","s3","eventbridge"], "tags": ["cloud","events"], "files": [{ "path": "s3/eventbridge.json", "template": "{ }\n" }] },
    { "id": "strike-gcp-workflows-minimal", "name": "GCP Workflows Minimal", "stack": ["gcp","workflows"], "tags": ["cloud","workflow"], "files": [{ "path": "workflows/workflow.yaml", "template": "# workflows minimal\n" }] },
    { "id": "strike-azure-event-hubs-producer", "name": "Azure Event Hubs Producer", "stack": ["azure","event-hubs"], "tags": ["cloud","stream"], "files": [{ "path": "event-hubs/producer.json", "template": "{ }\n" }] },

    { "id": "strike-openapi-yaml-minimal", "name": "(Merge) OpenAPI YAML Meta", "stack": ["openapi"], "tags": ["api","merge"] },
    { "id": "strike-nextjs-route-handler-minimal", "name": "(Merge) Next.js Route Handler Meta", "stack": ["nextjs"], "tags": ["frontend","api","merge"] },
    { "id": "strike-dockerfile-node-minimal", "name": "(Merge) Dockerfile Node Meta", "stack": ["docker"], "tags": ["ops","merge"] },
    { "id": "strike-otel-node-tracer-minimal", "name": "(Merge) OTel Node Tracer Meta", "stack": ["opentelemetry"], "tags": ["observability","merge"] },
    { "id": "strike-react-hook-form-minimal", "name": "(Merge) RHF Minimal Meta", "stack": ["react","forms"], "tags": ["frontend","merge"] }
  ]
}

