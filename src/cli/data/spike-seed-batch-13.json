{
  "items": [
    { "id": "strike-express-compression-streaming", "name": "Express Compression + Streaming", "stack": ["node","express"], "tags": ["backend","ssr","stream","compression"], "files": [{ "path": "server.js", "template": "import express from 'express';\nimport compression from 'compression';\nconst app = express();\napp.use(compression());\napp.get('/stream', (req,res)=>{ res.write('hello'); res.end(); });\napp.listen(3000);\n" }] },
    { "id": "strike-bun-elysia-minimal", "name": "Bun + Elysia Minimal", "stack": ["bun","elysia"], "tags": ["backend","edge"], "files": [{ "path": "index.ts", "template": "// bun + elysia minimal skeleton\n" }] },
    { "id": "strike-fastapi-background-task", "name": "FastAPI Background Task", "stack": ["python","fastapi"], "tags": ["backend"], "files": [{ "path": "main.py", "template": "from fastapi import FastAPI, BackgroundTasks\napp = FastAPI()\nasync def task(): pass\n@app.get('/run')\nasync def run(bg: BackgroundTasks): bg.add_task(task); return {'ok': True}\n" }] },
    { "id": "strike-ktor-plugin-minimal", "name": "Ktor Plugin Minimal", "stack": ["kotlin","ktor"], "tags": ["backend"], "files": [{ "path": "src/main/kotlin/Plugin.kt", "template": "// ktor plugin skeleton\n" }] },
    { "id": "strike-spring-security-config-minimal", "name": "Spring Security Config Minimal", "stack": ["java","spring"], "tags": ["backend","security"], "files": [{ "path": "src/main/java/app/SecurityConfig.java", "template": "// spring security config skeleton\n" }] },

    { "id": "strike-nextjs-og-image-route", "name": "Next.js OG Image Route", "stack": ["nextjs"], "tags": ["frontend","image"], "files": [{ "path": "app/api/og/route.ts", "template": "// next og image route skeleton\n" }] },
    { "id": "strike-nuxt3-runtime-config-usage", "name": "Nuxt3 Runtime Config Usage", "stack": ["nuxt"], "tags": ["frontend","config"], "files": [{ "path": "server/api/conf.get.ts", "template": "export default defineEventHandler((e)=> useRuntimeConfig())\n" }] },
    { "id": "strike-sveltekit-error-boundary", "name": "SvelteKit Error Boundary", "stack": ["sveltekit"], "tags": ["frontend","error"], "files": [{ "path": "src/error.svelte", "template": "<script> export let error; </script>\n<h1>{error?.message}</h1>\n" }] },
    { "id": "strike-angular-signals-store-advanced", "name": "Angular Signals Store Advanced", "stack": ["angular"], "tags": ["frontend","state","advanced"], "files": [{ "path": "src/app/store.ts", "template": "// signals store skeleton\n" }] },
    { "id": "strike-solid-lazy-routes", "name": "Solid Lazy Routes", "stack": ["solid"], "tags": ["frontend","router"], "files": [{ "path": "src/routes.tsx", "template": "// solid lazy routes skeleton\n" }] },

    { "id": "strike-otel-logs-exporter-config", "name": "OTel Logs Exporter Config", "stack": ["opentelemetry"], "tags": ["observability","logs"], "files": [{ "path": "otel/logs-exporter.js", "template": "// logs exporter config skeleton\n" }] },
    { "id": "strike-grafana-loki-dashboards", "name": "Grafana Loki Dashboards", "stack": ["grafana","loki"], "tags": ["observability","dashboards"], "files": [{ "path": "grafana/dashboards/loki.json", "template": "{ }\n" }] },
    { "id": "strike-prometheus-alerts-advanced", "name": "Prometheus Alerts Advanced", "stack": ["prometheus"], "tags": ["observability","alerts"], "files": [{ "path": "prometheus/alerts-advanced.yaml", "template": "groups: []\n" }] },

    { "id": "strike-csp-nonce-pattern", "name": "CSP Nonce Pattern", "stack": ["security","csp"], "tags": ["security"], "files": [{ "path": "security/csp-nonce.md", "template": "# CSP nonce pattern\n" }] },
    { "id": "strike-jwt-cookie-best-practices", "name": "JWT Cookie Best Practices", "stack": ["jwt"], "tags": ["security"], "files": [{ "path": "security/jwt-cookies.md", "template": "# JWT cookies best practices\n" }] },
    { "id": "strike-oauth2-device-code-advanced", "name": "OAuth2 Device Code Advanced", "stack": ["oauth2"], "tags": ["security"], "files": [{ "path": "security/device-code-advanced.md", "template": "# device code advanced\n" }] },

    { "id": "strike-kafka-consumer-group-rebalance-adv", "name": "Kafka Consumer Group Rebalance Advanced", "stack": ["kafkajs"], "tags": ["stream"], "files": [{ "path": "kafka/rebalance-advanced.md", "template": "# rebalance strategies\n" }] },
    { "id": "strike-nats-subject-wildcards", "name": "NATS Subject Wildcards", "stack": ["nats"], "tags": ["messaging"], "files": [{ "path": "nats/subjects.md", "template": "# subject wildcards\n" }] },

    { "id": "strike-gh-actions-reusable-typed-inputs", "name": "GH Actions Reusable Typed Inputs", "stack": ["github","actions"], "tags": ["ci"], "files": [{ "path": ".github/workflows/reusable-typed.yml", "template": "name: ReusableTyped\non: workflow_call:\n  inputs: { level: { required: true, type: string } }\njobs: {}\n" }] },
    { "id": "strike-terraform-variables-conventions", "name": "Terraform Variables Conventions", "stack": ["terraform"], "tags": ["infra"], "files": [{ "path": "patterns/variables.md", "template": "# variables conventions\n" }] },
    { "id": "strike-kustomize-overlays-minimal", "name": "Kustomize Overlays Minimal", "stack": ["kustomize"], "tags": ["ops"], "files": [{ "path": "overlays/dev/kustomization.yaml", "template": "resources: []\n" }] },

    { "id": "strike-msw-graphql-advanced", "name": "MSW GraphQL Advanced", "stack": ["msw","graphql"], "tags": ["test"], "files": [{ "path": "src/mocks/graphql-adv.ts", "template": "// msw graphql advanced handlers\n" }] },
    { "id": "strike-playwright-reporters-config", "name": "Playwright Reporters Config", "stack": ["playwright"], "tags": ["test"], "files": [{ "path": "playwright.reporters.ts", "template": "// reporters config skeleton\n" }] },
    { "id": "strike-jest-ts-jest-patterns", "name": "Jest ts-jest Patterns", "stack": ["jest","ts-jest"], "tags": ["test"], "files": [{ "path": "jest.ts-jest.md", "template": "# ts-jest patterns\n" }] },
    { "id": "strike-cypress-retries-config", "name": "Cypress Retries Config", "stack": ["cypress"], "tags": ["test"], "files": [{ "path": "cypress.config.ts", "template": "export default { e2e: { retries: 2 } };\n" }] },
    { "id": "strike-pact-verification-matrix-ci", "name": "Pact Verification Matrix CI", "stack": ["pact"], "tags": ["test","contract","ci"], "files": [{ "path": ".github/workflows/pact-matrix.yml", "template": "name: PactMatrix\non: [push]\n" }] },

    { "id": "strike-airflow-xcom-usage", "name": "Airflow XCom Usage", "stack": ["airflow"], "tags": ["data"], "files": [{ "path": "dags/xcom.py", "template": "# xcom usage skeleton\n" }] },
    { "id": "strike-dbt-source-freshness", "name": "dbt Source Freshness", "stack": ["dbt"], "tags": ["data"], "files": [{ "path": "models/sources.yml", "template": "version: 2\nsources: []\n" }] },
    { "id": "strike-bigquery-external-table", "name": "BigQuery External Table", "stack": ["gcp","bigquery"], "tags": ["data"], "files": [{ "path": "sql/external_table.sql", "template": "-- external table skeleton\n" }] },
    { "id": "strike-airbyte-connection-schedule", "name": "Airbyte Connection Schedule", "stack": ["airbyte"], "tags": ["data","etl"], "files": [{ "path": "airbyte/connection.json", "template": "{ }\n" }] },

    { "id": "strike-aws-apigw-mapping-template", "name": "AWS API Gateway Mapping Template", "stack": ["aws","apigateway"], "tags": ["cloud"], "files": [{ "path": "apigw/mapping.vtl", "template": "#set($inputRoot = $input.path('$'))\n" }] },
    { "id": "strike-gcp-pubsub-push-endpoint", "name": "GCP Pub/Sub Push Endpoint", "stack": ["gcp","pubsub"], "tags": ["cloud"], "files": [{ "path": "server.js", "template": "// pubsub push endpoint skeleton\n" }] },
    { "id": "strike-azure-storage-queue-config", "name": "Azure Storage Queue Config", "stack": ["azure","storage"], "tags": ["cloud"], "files": [{ "path": "queue/config.json", "template": "{ }\n" }] },

    { "id": "strike-openapi-yaml-minimal", "name": "(Merge) OpenAPI YAML Meta", "stack": ["openapi"], "tags": ["api","merge"] },
    { "id": "strike-nextjs-route-handler-minimal", "name": "(Merge) Next.js Route Handler Meta", "stack": ["nextjs"], "tags": ["frontend","api","merge"] },
    { "id": "strike-dockerfile-node-minimal", "name": "(Merge) Dockerfile Node Meta", "stack": ["docker"], "tags": ["ops","merge"] },
    { "id": "strike-otel-node-tracer-minimal", "name": "(Merge) OTel Node Tracer Meta", "stack": ["opentelemetry"], "tags": ["observability","merge"] },
    { "id": "strike-react-hook-form-minimal", "name": "(Merge) RHF Minimal Meta", "stack": ["react","forms"], "tags": ["frontend","merge"] }
  ]
}

