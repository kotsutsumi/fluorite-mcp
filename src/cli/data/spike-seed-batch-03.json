{
  "items": [
    { "id": "strike-gin-route-minimal", "name": "Go Gin Route Minimal", "stack": ["go","gin"], "tags": ["backend","api"], "files": [{ "path": "main.go", "template": "package main\nimport (\n  \"github.com/gin-gonic/gin\"\n)\nfunc main(){ r:=gin.Default(); r.GET(\"/health\", func(c *gin.Context){ c.JSON(200, gin.H{\"ok\":true}) }); r.Run() }\n" }] },
    { "id": "strike-echo-route-minimal", "name": "Go Echo Route Minimal", "stack": ["go","echo"], "tags": ["backend","api"], "files": [{ "path": "main.go", "template": "package main\nimport (\n  \"github.com/labstack/echo/v4\"\n)\nfunc main(){ e:=echo.New(); e.GET(\"/health\", func(c echo.Context) error { return c.JSON(200, map[string]any{\"ok\": true}) }); e.Start(\":3000\") }\n" }] },
    { "id": "strike-fiber-route-minimal", "name": "Go Fiber Route Minimal", "stack": ["go","fiber"], "tags": ["backend","api"], "files": [{ "path": "main.go", "template": "package main\nimport (\n  \"github.com/gofiber/fiber/v2\"\n)\nfunc main(){ app:=fiber.New(); app.Get(\"/health\", func(c *fiber.Ctx) error { return c.JSON(fiber.Map{\"ok\": true}) }); app.Listen(\":3000\") }\n" }] },
    { "id": "strike-aspnet-controller-minimal", "name": ".NET ASP.NET Controller Minimal", "stack": ["dotnet","aspnet"], "tags": ["backend"], "files": [{ "path": "Program.cs", "template": "var builder = WebApplication.CreateBuilder(args); var app = builder.Build(); app.MapGet(\"/health\", () => new { ok = true }); app.Run();\n" }] },
    { "id": "strike-koa-route-minimal", "name": "Koa Route Minimal", "stack": ["node","koa"], "tags": ["backend"], "files": [{ "path": "index.js", "template": "import Koa from 'koa';\nimport Router from '@koa/router';\nconst app = new Koa(); const router = new Router();\nrouter.get('/health', ctx => ctx.body = { ok: true });\napp.use(router.routes()); app.listen(3000);\n" }] },
    { "id": "strike-hono-route-minimal", "name": "Hono Route Minimal", "stack": ["node","hono"], "tags": ["backend","edge"], "files": [{ "path": "index.ts", "template": "import { Hono } from 'hono';\nconst app = new Hono();\napp.get('/health', c => c.json({ ok: true }));\nexport default app;\n" }] },

    { "id": "strike-svelte-component-minimal", "name": "Svelte Component Minimal", "stack": ["svelte"], "tags": ["frontend"], "files": [{ "path": "src/App.svelte", "template": "<script> let count=0; </script>\n<button on:click={()=>count++}>Count {count}</button>\n" }] },
    { "id": "strike-sveltekit-route-minimal", "name": "SvelteKit Route Minimal", "stack": ["sveltekit"], "tags": ["frontend","ssr"], "files": [{ "path": "src/routes/+page.svelte", "template": "<h1>Hello SvelteKit</h1>\n" }] },
    { "id": "strike-solid-component-minimal", "name": "SolidJS Component Minimal", "stack": ["solid"], "tags": ["frontend"], "files": [{ "path": "src/App.tsx", "template": "import { createSignal } from 'solid-js';\nexport default function App(){ const [c,setC]=createSignal(0); return <button onClick={()=>setC(c()+1)}>Count {c()}</button> }\n" }] },
    { "id": "strike-nuxt3-page-minimal", "name": "Nuxt3 Page Minimal", "stack": ["nuxt"], "tags": ["frontend","ssr"], "files": [{ "path": "pages/index.vue", "template": "<template><h1>Hello Nuxt3</h1></template>\n" }] },
    { "id": "strike-angular-component-minimal", "name": "Angular Standalone Component Minimal", "stack": ["angular"], "tags": ["frontend"], "files": [{ "path": "src/app/counter.component.ts", "template": "import { Component } from '@angular/core';\n@Component({ selector:'app-counter', standalone:true, template:`<button (click)=\"count++\">{{count}}</button>` })\nexport class Counter { count=0 }\n" }] },

    { "id": "strike-nats-pubsub-minimal", "name": "NATS PubSub Minimal", "stack": ["node","nats"], "tags": ["messaging"], "files": [{ "path": "nats.js", "template": "import { connect, StringCodec } from 'nats';\nconst nc = await connect({ servers: 'nats://localhost:4222' });\nconst sc = StringCodec();\nconst sub = nc.subscribe('news');\n(async ()=>{ for await (const m of sub) console.log(sc.decode(m.data)) })();\nnc.publish('news', sc.encode('hello'));\n" }] },
    { "id": "strike-aws-sns-publish-minimal", "name": "AWS SNS Publish Minimal", "stack": ["aws","sns"], "tags": ["cloud","messaging"], "files": [{ "path": "sns.mjs", "template": "import { SNSClient, PublishCommand } from '@aws-sdk/client-sns';\nconst client = new SNSClient({});\nawait client.send(new PublishCommand({ TopicArn: 'arn:aws:sns:us-east-1:123:topic', Message: 'hello' }));\n" }] },
    { "id": "strike-aws-sqs-consumer-minimal", "name": "AWS SQS Consumer Minimal", "stack": ["aws","sqs"], "tags": ["cloud","queue"], "files": [{ "path": "sqs.mjs", "template": "import { SQSClient, ReceiveMessageCommand, DeleteMessageCommand } from '@aws-sdk/client-sqs';\nconst c = new SQSClient({}); const q='https://sqs.us-east-1.amazonaws.com/123/queue';\nconst r= await c.send(new ReceiveMessageCommand({ QueueUrl:q, WaitTimeSeconds:1 }));\nfor (const m of r.Messages||[]){ console.log(m.Body); await c.send(new DeleteMessageCommand({ QueueUrl:q, ReceiptHandle:m.ReceiptHandle! })); }\n" }] },
    { "id": "strike-kinesis-producer-minimal", "name": "AWS Kinesis Producer Minimal", "stack": ["aws","kinesis"], "tags": ["cloud","stream"], "files": [{ "path": "kinesis.mjs", "template": "import { KinesisClient, PutRecordCommand } from '@aws-sdk/client-kinesis';\nconst c = new KinesisClient({});\nawait c.send(new PutRecordCommand({ StreamName:'events', PartitionKey:'p', Data: new TextEncoder().encode('hello') }));\n" }] },

    { "id": "strike-jwt-minimal", "name": "JWT Sign/Verify Minimal", "stack": ["node","jsonwebtoken"], "tags": ["security"], "files": [{ "path": "jwt.js", "template": "import jwt from 'jsonwebtoken';\nconst token = jwt.sign({ sub:'1' }, 'secret');\nconsole.log(jwt.verify(token, 'secret'));\n" }] },
    { "id": "strike-helmet-csp-minimal", "name": "Helmet CSP Minimal", "stack": ["node","helmet"], "tags": ["security"], "files": [{ "path": "server.js", "template": "import express from 'express';\nimport helmet from 'helmet';\nconst app = express();\napp.use(helmet.contentSecurityPolicy());\napp.get('/health', (_,res)=>res.json({ok:true}));\napp.listen(3000);\n" }] },
    { "id": "strike-csurf-minimal", "name": "CSURF Minimal", "stack": ["node","csurf"], "tags": ["security"], "files": [{ "path": "server.js", "template": "import express from 'express';\nimport cookieParser from 'cookie-parser';\nimport csurf from 'csurf';\nconst app=express(); app.use(cookieParser()); app.use(csurf({ cookie:true }));\napp.get('/form', (req,res)=> res.send(`<input type=hidden name=_csrf value=\"${req.csrfToken()}\"/>`));\napp.listen(3000);\n" }] },
    { "id": "strike-opa-policy-minimal", "name": "OPA Rego Policy Minimal", "stack": ["opa"], "tags": ["security","policy"], "files": [{ "path": "policy.rego", "template": "package example\nallow { input.user == \"admin\" }\n" }] },

    { "id": "strike-otel-node-metrics-minimal", "name": "OpenTelemetry Metrics Minimal", "stack": ["node","opentelemetry"], "tags": ["observability","metrics"], "files": [{ "path": "metrics.js", "template": "const { MeterProvider } = require('@opentelemetry/sdk-metrics');\nconst meter = new MeterProvider().getMeter('app');\nconst c = meter.createCounter('requests'); c.add(1);\n" }] },
    { "id": "strike-prom-client-minimal", "name": "Prometheus Client Minimal", "stack": ["node","prom-client"], "tags": ["observability","metrics"], "files": [{ "path": "metrics.js", "template": "import client from 'prom-client';\nconst c = new client.Counter({ name:'requests', help:'requests' });\nc.inc();\n" }] },

    { "id": "strike-gh-actions-node-cache", "name": "GitHub Actions Node Cache", "stack": ["github","actions"], "tags": ["ci"], "files": [{ "path": ".github/workflows/ci-cache.yml", "template": "name: CI Cache\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with: { node-version: '20', cache: 'npm' }\n      - run: npm ci\n      - run: npm test\n" }] },
    { "id": "strike-terraform-gcp-storage-minimal", "name": "Terraform GCP Storage Minimal", "stack": ["terraform","gcp"], "tags": ["infra"], "files": [{ "path": "main.tf", "template": "provider \"google\" { project = \"demo\" region=\"us-central1\" }\nresource \"google_storage_bucket\" \"b\" { name=\"demo-bucket-123\" location=\"US\" }\n" }] },
    { "id": "strike-terraform-azure-storage-minimal", "name": "Terraform Azure Storage Minimal", "stack": ["terraform","azure"], "tags": ["infra"], "files": [{ "path": "main.tf", "template": "provider \"azurerm\" { features {} }\nresource \"azurerm_resource_group\" \"rg\" { name=\"rg\" location=\"eastus\" }\nresource \"azurerm_storage_account\" \"sa\" { name=\"storacctdemo\" resource_group_name=azurerm_resource_group.rg.name location=azurerm_resource_group.rg.location account_tier=\"Standard\" account_replication_type=\"LRS\" }\n" }] },
    { "id": "strike-helm-values-minimal", "name": "Helm values.yaml Minimal", "stack": ["helm"], "tags": ["ops"], "files": [{ "path": "chart/values.yaml", "template": "replicaCount: 1\nimage: { repository: app, tag: latest }\n" }] },
    { "id": "strike-kustomize-base-minimal", "name": "Kustomize Base Minimal", "stack": ["kustomize"], "tags": ["ops"], "files": [{ "path": "kustomization.yaml", "template": "resources:\n- deployment.yaml\n" }] },

    { "id": "strike-jest-config-minimal", "name": "Jest Config Minimal", "stack": ["jest","typescript"], "tags": ["test"], "files": [{ "path": "jest.config.ts", "template": "export default { testEnvironment: 'node' };\n" }] },
    { "id": "strike-pact-consumer-test-minimal", "name": "Pact Consumer Test Minimal", "stack": ["pact","typescript"], "tags": ["test","contract"], "files": [{ "path": "test/pact.spec.ts", "template": "import { PactV3 } from '@pact-foundation/pact';\nconst provider = new PactV3({ consumer:'web', provider:'api' });\n// define interactions...\n" }] },
    { "id": "strike-testing-library-react-minimal", "name": "Testing Library React Minimal", "stack": ["react","testing-library"], "tags": ["test"], "files": [{ "path": "src/App.test.tsx", "template": "import { render, screen } from '@testing-library/react';\nimport App from './App';\nrender(<App/>);\nscreen.getByText(/hello/i);\n" }] },

    { "id": "strike-sqlalchemy-model-minimal", "name": "SQLAlchemy Model Minimal", "stack": ["python","sqlalchemy"], "tags": ["db"], "files": [{ "path": "models.py", "template": "from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nclass Base(DeclarativeBase): pass\nclass User(Base):\n  __tablename__='users'\n  id: Mapped[int] = mapped_column(primary_key=True)\n  email: Mapped[str]\n" }] },
    { "id": "strike-gorm-model-minimal", "name": "GORM Model Minimal", "stack": ["go","gorm"], "tags": ["db"], "files": [{ "path": "models/user.go", "template": "package models\ntype User struct { ID uint `gorm:\"primaryKey\"` Email string }\n" }] },

    { "id": "strike-sklearn-pipeline-minimal", "name": "Scikit-learn Pipeline Minimal", "stack": ["python","sklearn"], "tags": ["ml"], "files": [{ "path": "ml.py", "template": "from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\npipe = Pipeline([('scaler', StandardScaler()), ('clf', LogisticRegression())])\n" }] },
    { "id": "strike-pandas-dataframe-minimal", "name": "Pandas DataFrame Minimal", "stack": ["python","pandas"], "tags": ["data"], "files": [{ "path": "data.py", "template": "import pandas as pd\ndf = pd.DataFrame({'a':[1,2,3]})\nprint(df.describe())\n" }] },

    { "id": "strike-cloudflare-workers-minimal", "name": "Cloudflare Workers Minimal", "stack": ["cloudflare","workers"], "tags": ["edge"], "files": [{ "path": "worker.js", "template": "export default {\n  async fetch(){ return new Response('ok') }\n};\n" }] },
    { "id": "strike-vercel-edge-minimal", "name": "Vercel Edge Function Minimal", "stack": ["vercel","edge"], "tags": ["edge"], "files": [{ "path": "api/edge.ts", "template": "export const config = { runtime: 'edge' };\nexport default function handler(){ return new Response('ok'); }\n" }] },

    { "id": "strike-bullmq-worker-minimal", "name": "BullMQ Worker Minimal", "stack": ["node","bullmq"], "tags": ["queue"], "files": [{ "path": "worker.js", "template": "import { Worker } from 'bullmq';\nnew Worker('jobs', async (job)=>{ console.log(job.name) });\n" }] },
    { "id": "strike-ioredis-cache-minimal", "name": "ioredis Cache Minimal", "stack": ["node","ioredis"], "tags": ["cache"], "files": [{ "path": "cache.js", "template": "import Redis from 'ioredis';\nconst r = new Redis(); await r.set('k','v'); console.log(await r.get('k'));\n" }] },
    { "id": "strike-lru-cache-minimal", "name": "LRU Cache Minimal", "stack": ["node","lru-cache"], "tags": ["cache"], "files": [{ "path": "cache.js", "template": "import LRU from 'lru-cache';\nconst cache = new LRU({ max: 100 }); cache.set('k','v'); console.log(cache.get('k'));\n" }] },

    { "id": "strike-launchdarkly-minimal", "name": "LaunchDarkly Minimal", "stack": ["node","launchdarkly"], "tags": ["feature-flags"], "files": [{ "path": "flags.js", "template": "import LaunchDarkly from 'launchdarkly-node-server-sdk';\nconst client = LaunchDarkly.init('sdk-key'); await client.waitForInitialization();\nconsole.log(await client.variation('flag', { key:'user' }, false));\n" }] },
    { "id": "strike-meilisearch-index-minimal", "name": "Meilisearch Index Minimal", "stack": ["node","meilisearch"], "tags": ["search"], "files": [{ "path": "search.js", "template": "import { MeiliSearch } from 'meilisearch';\nconst c = new MeiliSearch({ host: 'http://127.0.0.1:7700' });\nawait c.index('movies').addDocuments([{ id: 1, title: 'Up' }]);\n" }] },
    { "id": "strike-s3-upload-minimal", "name": "S3 Upload Minimal", "stack": ["aws","s3"], "tags": ["storage"], "files": [{ "path": "s3.mjs", "template": "import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nconst c = new S3Client({});\nawait c.send(new PutObjectCommand({ Bucket:'bucket', Key:'a.txt', Body:'hello' }));\n" }] },
    { "id": "strike-nodemailer-minimal", "name": "Nodemailer Minimal", "stack": ["node","nodemailer"], "tags": ["email"], "files": [{ "path": "mail.js", "template": "import nodemailer from 'nodemailer';\nconst t = nodemailer.createTransport({ sendmail: true });\nawait t.sendMail({ to:'you@example.com', subject:'hi', text:'hello' });\n" }] },
    { "id": "strike-stripe-webhook-minimal", "name": "Stripe Webhook Minimal", "stack": ["node","stripe"], "tags": ["payments"], "files": [{ "path": "webhook.js", "template": "import Stripe from 'stripe';\nconst stripe = new Stripe('sk');\n// verify signature & handle events...\n" }] },

    { "id": "strike-express-route-minimal", "name": "(Merge) Express Route Meta", "stack": ["node","express"], "tags": ["api","health","example"] }
  ]
}

