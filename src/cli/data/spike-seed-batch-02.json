{
  "items": [
    { "id": "strike-fastapi-route-minimal", "name": "FastAPI Route Minimal", "stack": ["python","fastapi"], "tags": ["backend","api"], "files": [{ "path": "main.py", "template": "from fastapi import FastAPI\napp = FastAPI()\n@app.get('/health')\ndef health():\n    return {'ok': True}\n" }] },
    { "id": "strike-flask-route-minimal", "name": "Flask Route Minimal", "stack": ["python","flask"], "tags": ["backend"], "files": [{ "path": "app.py", "template": "from flask import Flask, jsonify\napp = Flask(__name__)\n@app.get('/health')\ndef health():\n    return jsonify(ok=True)\n" }] },
    { "id": "strike-django-view-minimal", "name": "Django View Minimal", "stack": ["python","django"], "tags": ["backend"], "files": [{ "path": "app/views.py", "template": "from django.http import JsonResponse\n\ndef health(_):\n    return JsonResponse({'ok': True})\n" }] },
    { "id": "strike-axum-route-minimal", "name": "Axum Route Minimal", "stack": ["rust","axum"], "tags": ["backend"], "files": [{ "path": "src/main.rs", "template": "use axum::{routing::get, Router};\n#[tokio::main]\nasync fn main() {\n  let app = Router::new().route(\"/health\", get(|| async { \"ok\" }));\n  axum::Server::bind(&\"0.0.0.0:3000\".parse().unwrap()).serve(app.into_make_service()).await.unwrap();\n}\n" }] },
    { "id": "strike-actix-route-minimal", "name": "Actix Route Minimal", "stack": ["rust","actix-web"], "tags": ["backend"], "files": [{ "path": "src/main.rs", "template": "use actix_web::{get, App, HttpServer, Responder};\n#[get(\"/health\")] async fn health() -> impl Responder { \"ok\" }\n#[actix_web::main] async fn main() -> std::io::Result<()> {\n  HttpServer::new(|| App::new().service(health)).bind((\"0.0.0.0\",3000))?.run().await\n}\n" }] },
    { "id": "strike-spring-controller-minimal", "name": "Spring Boot Controller Minimal", "stack": ["java","spring"], "tags": ["backend"], "files": [{ "path": "src/main/java/app/HealthController.java", "template": "package app;\nimport org.springframework.web.bind.annotation.*;\n@RestController\npublic class HealthController {\n  @GetMapping(\"/health\") public String health(){ return \"ok\"; }\n}\n" }] },
    { "id": "strike-ktor-route-minimal", "name": "Ktor Route Minimal", "stack": ["kotlin","ktor"], "tags": ["backend"], "files": [{ "path": "src/main/kotlin/App.kt", "template": "import io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nfun main(){ embeddedServer(Netty, port=3000){ routing{ get(\"/health\"){ call.respondText(\"ok\") } } }.start(wait=true) }\n" }] },
    { "id": "strike-rails-controller-minimal", "name": "Rails Controller Minimal", "stack": ["ruby","rails"], "tags": ["backend"], "files": [{ "path": "app/controllers/health_controller.rb", "template": "class HealthController < ApplicationController\n  def index\n    render json: { ok: true }\n  end\nend\n" }] },
    { "id": "strike-laravel-route-minimal", "name": "Laravel Route Minimal", "stack": ["php","laravel"], "tags": ["backend"], "files": [{ "path": "routes/web.php", "template": "Route::get('/health', fn() => response()->json(['ok'=>true]));\n" }] },
    { "id": "strike-phoenix-controller-minimal", "name": "Phoenix Controller Minimal", "stack": ["elixir","phoenix"], "tags": ["backend"], "files": [{ "path": "lib/app_web/controllers/health_controller.ex", "template": "defmodule AppWeb.HealthController do\n  use AppWeb, :controller\n  def index(conn, _params), do: json(conn, %{ok: true})\nend\n" }] },
    { "id": "strike-apollo-server-minimal", "name": "Apollo Server Minimal", "stack": ["node","apollo"], "tags": ["graphql"], "files": [{ "path": "index.js", "template": "import { ApolloServer } from '@apollo/server';\nconst typeDefs = `type Query { hello: String }`;\nconst resolvers = { Query: { hello: ()=>'world' } };\nconst server = new ApolloServer({ typeDefs, resolvers });\nawait server.start();\n" }] },
    { "id": "strike-trpc-router-minimal", "name": "tRPC Router Minimal", "stack": ["typescript","trpc"], "tags": ["api"], "files": [{ "path": "src/router.ts", "template": "import { initTRPC } from '@trpc/server';\nconst t = initTRPC.create();\nexport const router = t.router({ hello: t.procedure.query(()=> 'world') });\n" }] },
    { "id": "strike-grpc-node-minimal", "name": "gRPC Node Minimal", "stack": ["node","grpc"], "tags": ["rpc"], "files": [{ "path": "proto/health.proto", "template": "syntax = 'proto3';\nservice Health { rpc Check(google.protobuf.Empty) returns (CheckResponse); }\nmessage CheckResponse { bool ok = 1; }\n" }] },
    { "id": "strike-ws-server-minimal", "name": "WebSocket Server Minimal", "stack": ["node","ws"], "tags": ["realtime"], "files": [{ "path": "index.js", "template": "import { WebSocketServer } from 'ws';\nconst wss = new WebSocketServer({ port: 3000 });\nwss.on('connection', ws => ws.send('hello'));\n" }] },
    { "id": "strike-socketio-server-minimal", "name": "Socket.IO Server Minimal", "stack": ["node","socket.io"], "tags": ["realtime"], "files": [{ "path": "index.js", "template": "import { Server } from 'socket.io';\nnew Server(3000).on('connection', s => s.emit('hello','world'));\n" }] },
    { "id": "strike-redis-pubsub-minimal", "name": "Redis Pub/Sub Minimal", "stack": ["node","redis"], "tags": ["cache","queue"], "files": [{ "path": "pubsub.js", "template": "import { createClient } from 'redis';\nconst pub = createClient(); const sub = createClient();\nawait pub.connect(); await sub.connect();\nawait sub.subscribe('news', (m)=> console.log(m));\nawait pub.publish('news','hello');\n" }] },
    { "id": "strike-sequelize-model-minimal", "name": "Sequelize Model Minimal", "stack": ["node","sequelize"], "tags": ["db"], "files": [{ "path": "models/user.js", "template": "import { DataTypes } from 'sequelize';\nexport default (sequelize)=> sequelize.define('User',{ email: DataTypes.STRING });\n" }] },
    { "id": "strike-drizzle-schema-minimal", "name": "Drizzle Schema Minimal", "stack": ["node","drizzle"], "tags": ["db"], "files": [{ "path": "src/schema.ts", "template": "import { pgTable, serial, varchar } from 'drizzle-orm/pg-core';\nexport const users = pgTable('users',{ id: serial('id').primaryKey(), email: varchar('email',{length:255}) });\n" }] },
    { "id": "strike-knex-migration-minimal", "name": "Knex Migration Minimal", "stack": ["node","knex"], "tags": ["db"], "files": [{ "path": "migrations/001_init.js", "template": "export async function up(knex){ await knex.schema.createTable('users', t=>{ t.increments('id'); t.string('email'); }); }\nexport async function down(knex){ await knex.schema.dropTable('users'); }\n" }] },
    { "id": "strike-mongoose-schema-minimal", "name": "Mongoose Schema Minimal", "stack": ["node","mongoose"], "tags": ["db"], "files": [{ "path": "models/User.js", "template": "import { Schema, model } from 'mongoose';\nexport default model('User', new Schema({ email: String }));\n" }] },
    { "id": "strike-otel-node-tracer-minimal", "name": "OpenTelemetry Node Tracer Minimal", "stack": ["node","opentelemetry"], "tags": ["observability"], "files": [{ "path": "tracer.js", "template": "const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');\nnew NodeTracerProvider().register();\n" }] },
    { "id": "strike-sentry-init-minimal", "name": "Sentry Init Minimal", "stack": ["node","sentry"], "tags": ["observability"], "files": [{ "path": "sentry.js", "template": "import * as Sentry from '@sentry/node';\nSentry.init({ dsn: 'YOUR_DSN' });\n" }] },
    { "id": "strike-winston-logger-minimal", "name": "Winston Logger Minimal", "stack": ["node","winston"], "tags": ["logging"], "files": [{ "path": "logger.js", "template": "import winston from 'winston';\nexport const logger = winston.createLogger({ transports: [new winston.transports.Console()] });\n" }] },
    { "id": "strike-pino-logger-minimal", "name": "Pino Logger Minimal", "stack": ["node","pino"], "tags": ["logging"], "files": [{ "path": "logger.js", "template": "import pino from 'pino';\nexport const logger = pino();\n" }] },
    { "id": "strike-gh-actions-node-ci-minimal", "name": "GitHub Actions Node CI Minimal", "stack": ["github","actions"], "tags": ["ci"], "files": [{ "path": ".github/workflows/ci.yml", "template": "name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with: { node-version: '20' }\n      - run: npm ci\n      - run: npm test\n" }] },
    { "id": "strike-terraform-aws-s3-minimal", "name": "Terraform AWS S3 Minimal", "stack": ["terraform","aws"], "tags": ["infra"], "files": [{ "path": "main.tf", "template": "provider \"aws\" { region = \"us-east-1\" }\nresource \"aws_s3_bucket\" \"b\" { bucket = \"example-bucket\" }\n" }] },
    { "id": "strike-helm-chart-skeleton", "name": "Helm Chart Skeleton", "stack": ["helm","kubernetes"], "tags": ["ops"], "files": [{ "path": "chart/Chart.yaml", "template": "apiVersion: v2\nname: app\nversion: 0.1.0\n" }] },
    { "id": "strike-docker-compose-minimal", "name": "Docker Compose Minimal", "stack": ["docker"], "tags": ["ops"], "files": [{ "path": "docker-compose.yml", "template": "version: '3'\nservices:\n  app:\n    image: node:20-alpine\n    command: node index.js\n" }] },
    { "id": "strike-makefile-minimal", "name": "Makefile Minimal", "stack": ["make"], "tags": ["tooling"], "files": [{ "path": "Makefile", "template": "build:\n\techo build\n" }] },
    { "id": "strike-husky-setup-minimal", "name": "Husky Setup Minimal", "stack": ["husky"], "tags": ["git"], "files": [{ "path": ".husky/pre-commit", "template": "#!/bin/sh\nnpx lint-staged\n" }] },
    { "id": "strike-lint-staged-config-minimal", "name": "lint-staged Config Minimal", "stack": ["lint-staged"], "tags": ["git"], "files": [{ "path": ".lintstagedrc.json", "template": "{ \"*.{js,ts}\": \"eslint --fix\" }\n" }] },
    { "id": "strike-cypress-test-minimal", "name": "Cypress Test Minimal", "stack": ["cypress"], "tags": ["test"], "files": [{ "path": "cypress/e2e/spec.cy.ts", "template": "describe('basic', ()=>{ it('works',()=>{ cy.visit('https://example.com') }) })\n" }] },
    { "id": "strike-msw-setup-minimal", "name": "MSW Setup Minimal", "stack": ["msw","typescript"], "tags": ["test"], "files": [{ "path": "src/mocks/handlers.ts", "template": "import { http, HttpResponse } from 'msw';\nexport const handlers = [ http.get('/health', ()=> HttpResponse.json({ ok: true })) ];\n" }] },
    { "id": "strike-storybook-config-minimal", "name": "Storybook Config Minimal", "stack": ["storybook"], "tags": ["docs"], "files": [{ "path": ".storybook/main.ts", "template": "import type { StorybookConfig } from '@storybook/react-vite';\nconst config: StorybookConfig = { stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'] };\nexport default config;\n" }] },
    { "id": "strike-lhci-config-minimal", "name": "Lighthouse CI Config Minimal", "stack": ["lhci"], "tags": ["quality"], "files": [{ "path": ".lighthouserc.json", "template": "{ \"ci\": { \"collect\": { \"staticDistDir\": \"dist\" } } }\n" }] },
    { "id": "strike-rollup-config-minimal", "name": "Rollup Config Minimal", "stack": ["rollup"], "tags": ["build"], "files": [{ "path": "rollup.config.mjs", "template": "export default { input: 'src/index.js', output: { file: 'dist/bundle.js', format: 'esm' } };\n" }] },
    { "id": "strike-vite-config-minimal", "name": "Vite Config Minimal", "stack": ["vite"], "tags": ["build"], "files": [{ "path": "vite.config.ts", "template": "import { defineConfig } from 'vite';\nexport default defineConfig({});\n" }] },
    { "id": "strike-webpack-config-minimal", "name": "Webpack Config Minimal", "stack": ["webpack"], "tags": ["build"], "files": [{ "path": "webpack.config.js", "template": "module.exports = { mode: 'development' };\n" }] },
    { "id": "strike-commitlint-config-minimal", "name": "Commitlint Config Minimal", "stack": ["commitlint"], "tags": ["git"], "files": [{ "path": "commitlint.config.js", "template": "export default { extends: ['@commitlint/config-conventional'] };\n" }] },
    { "id": "strike-renovate-config-minimal", "name": "Renovate Config Minimal", "stack": ["renovate"], "tags": ["deps"], "files": [{ "path": "renovate.json", "template": "{ \"extends\": [\"config:base\"] }\n" }] },
    { "id": "strike-dependabot-config-minimal", "name": "Dependabot Config Minimal", "stack": ["dependabot"], "tags": ["deps"], "files": [{ "path": ".github/dependabot.yml", "template": "version: 2\nupdates:\n  - package-ecosystem: npm\n    directory: /\n    schedule:\n      interval: weekly\n" }] },
    { "id": "strike-codeowners-minimal", "name": "CODEOWNERS Minimal", "stack": ["github"], "tags": ["repo"], "files": [{ "path": ".github/CODEOWNERS", "template": "* @your-org/maintainers\n" }] }
  ]
}

