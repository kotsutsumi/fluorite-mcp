{
  "id": "strike-langchain-service-testing-py",
  "name": "langchain service testing py",
  "version": "0.1.0",
  "stack": [
    "langchain",
    "py"
  ],
  "tags": [
    "service",
    "testing",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for langchain service in py (testing).",
  "params": [
    {
      "name": "app_name",
      "default": "langchain-service-app"
    }
  ],
  "files": [
    {
      "path": "src/langchain-service.py",
      "template": "# Spike: langchain service (py)\n# Auto-generated spike stub for langchain (service)\ndef demo():\n    print('use langchain - service (testing)')\n"
    },
    {
      "path": "src/langchain/basic.ts",
      "template": "import { ChatOpenAI } from '@langchain/openai';\nimport { ChatPromptTemplate } from '@langchain/core/prompts';\nexport async function run(prompt: string){\n  const llm = new ChatOpenAI({ model: 'gpt-4o-mini', apiKey: process.env.OPENAI_API_KEY });\n  const tpl = ChatPromptTemplate.fromMessages([['system','You are helpful.'],['human','{input}']]);\n  const chain = tpl.pipe(llm);\n  const res = await chain.invoke({ input: prompt });\n  return res?.content?.toString?.() || String(res);\n}\n"
    },
    {
      "path": "spikes/strike-langchain-service-testing-py.py.txt",
      "template": "# Spike: langchain service (py)\n# Auto-generated spike stub for langchain (service)\ndef demo():\n    print('use langchain - service (testing)')\n"
    },
    {
      "path": "spikes/strike-langchain-service-testing-py.md",
      "template": "# langchain service (testing, py)\n\nThis is an auto-generated spike template.\n"
    },
    {
      "path": "spikes/strike-langchain-service-testing-py_test.py",
      "template": "def test_demo():\n    assert True\n"
    }
  ],
  "patches": []
}