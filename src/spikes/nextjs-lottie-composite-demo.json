{
  "id": "nextjs-lottie-composite-demo",
  "name": "Next.js Lottie 複合デモ (IO+進捗+速度+セグメント)",
  "version": "1.0.0",
  "stack": ["nextjs", "react", "lottie"],
  "tags": ["nextjs", "app-router", "client", "lottie", "intersection", "scroll", "speed", "segments"],
  "description": "IntersectionObserverでの再生/一時停止、スクロール量→フレーム進捗(goToAndStop)、スクロール速度→setSpeed、セグメントジャンプ(goToAndPlay)を1ページに統合したデモ。",
  "params": [
    { "name": "lottie_url", "default": "https://assets9.lottiefiles.com/packages/lf20_5ngs2ksb.json" }
  ],
  "files": [
    {
      "path": "app/lottie-pro/page.tsx",
      "template": "'use client';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Lottie, { LottieRefCurrentProps } from 'lottie-react';\n\nexport default function Page(){\n  const lottieRef = useRef<LottieRefCurrentProps>(null);\n  const holderRef = useRef<HTMLDivElement>(null);\n  const [data, setData] = useState<any | null>(null);\n  const url = process.env.NEXT_PUBLIC_LOTTIE_URL || '{{lottie_url}}';\n\n  // JSON 読み込み\n  useEffect(() => {\n    let alive = true;\n    fetch(url).then(r => r.json()).then(json => { if (alive) setData(json); });\n    return () => { alive = false; };\n  }, [url]);\n\n  // IntersectionObserver: 可視/不可視で再生/一時停止\n  useEffect(() => {\n    if (!holderRef.current) return;\n    const el = holderRef.current;\n    const obs = new IntersectionObserver((entries) => {\n      const e = entries[0];\n      if (e?.isIntersecting) lottieRef.current?.play?.();\n      else lottieRef.current?.pause?.();\n    }, { threshold: 0.25 });\n    obs.observe(el);\n    return () => obs.disconnect();\n  }, []);\n\n  // スクロール: 進捗→フレーム、速度→setSpeed\n  useEffect(() => {\n    let lastY = window.scrollY;\n    let lastT = performance.now();\n    let raf = 0;\n    const clamp = (v:number, min:number, max:number) => Math.max(min, Math.min(max, v));\n    const onScroll = () => {\n      cancelAnimationFrame(raf);\n      raf = requestAnimationFrame(() => {\n        // 速度→setSpeed\n        const nowY = window.scrollY;\n        const nowT = performance.now();\n        const dy = Math.abs(nowY - lastY);\n        const dt = Math.max(1, nowT - lastT);\n        const pxPerMs = dy / dt;\n        const speed = clamp(pxPerMs * 8, 0.2, 3);\n        (lottieRef.current as any)?.setSpeed?.(speed);\n        lastY = nowY;\n        lastT = nowT;\n        // 進捗→フレーム(goToAndStop)\n        const doc = document.documentElement;\n        const max = (doc.scrollHeight - doc.clientHeight) || 1;\n        const progress = clamp(doc.scrollTop / max, 0, 1);\n        const totalFrames = (lottieRef.current as any)?.getDuration?.(true) || 300;\n        const frame = Math.floor(totalFrames * progress);\n        (lottieRef.current as any)?.goToAndStop?.(frame, true);\n      });\n    };\n    window.addEventListener('scroll', onScroll, { passive: true });\n    return () => { cancelAnimationFrame(raf); window.removeEventListener('scroll', onScroll as any); };\n  }, []);\n\n  // セグメント ジャンプ\n  const jump = (frame: number) => { (lottieRef.current as any)?.goToAndPlay?.(frame, true); };\n\n  return (\n    <main style={{ fontFamily: 'sans-serif' }}>\n      <div style={{ height: '120vh', display: 'grid', placeItems: 'center' }}><h1>Lottie Composite Demo</h1></div>\n      <section style={{ minHeight: '80vh', display: 'grid', placeItems: 'center' }}>\n        <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>\n          <button onClick={() => jump(0)}>Intro</button>\n          <button onClick={() => jump(60)}>Main</button>\n          <button onClick={() => jump(120)}>Outro</button>\n        </div>\n        <div ref={holderRef} style={{ width: 360, height: 360, border: '1px solid #ddd', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          {data ? (\n            <Lottie lottieRef={lottieRef} animationData={data} loop autoplay={false} style={{ width: 360, height: 360 }} />\n          ) : 'Loading...'}\n        </div>\n        <p style={{ opacity: 0.6, marginTop: 12 }}>\n          可視領域: 自動再生/一時停止 ・ スクロール: 進捗→フレーム / 速度→setSpeed ・ ボタン: セグメントジャンプ\n        </p>\n      </section>\n      <div style={{ height: '120vh' }} />\n    </main>\n  );\n}\n"
    }
  ]
}

