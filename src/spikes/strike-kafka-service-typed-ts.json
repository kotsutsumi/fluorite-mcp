{
  "id": "strike-kafka-service-typed-ts",
  "name": "kafka service typed ts",
  "version": "0.1.0",
  "stack": [
    "kafka",
    "ts"
  ],
  "tags": [
    "service",
    "typed",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for kafka service in ts (typed).",
  "params": [
    {
      "name": "app_name",
      "default": "kafka-service-app"
    }
  ],
  "files": [
    {
      "path": "src/kafka-service.ts",
      "template": "# Spike: kafka service (ts)\n// Auto-generated spike stub for kafka (service)\nexport function demo() {\n  console.log('use kafka - service (typed)');\n}\n"
    },
    {
      "path": "src/kafka/producer.ts",
      "template": "import { Kafka } from 'kafkajs';\nconst kafka = new Kafka({ clientId: 'app', brokers: ['localhost:9092'] });\nexport async function produce(topic: string, message: string){ const p = kafka.producer(); await p.connect(); await p.send({ topic, messages: [{ value: message }] }); await p.disconnect(); }\n"
    },
    {
      "path": "src/kafka/consumer.ts",
      "template": "import { Kafka } from 'kafkajs';\nconst kafka = new Kafka({ clientId: 'app', brokers: ['localhost:9092'] });\nexport async function consume(topic: string){ const c = kafka.consumer({ groupId: 'group' }); await c.connect(); await c.subscribe({ topic, fromBeginning: true }); await c.run({ eachMessage: async ({ message }) => console.log(message.value?.toString()) }); }\n"
    },
    {
      "path": "spikes/strike-kafka-service-typed-ts.ts.txt",
      "template": "# Spike: kafka service (ts)\n// Auto-generated spike stub for kafka (service)\nexport function demo() {\n  console.log('use kafka - service (typed)');\n}\n"
    },
    {
      "path": "spikes/strike-kafka-service-typed-ts.md",
      "template": "# kafka service (typed, ts)\n\nThis is an auto-generated spike template.\n"
    }
  ],
  "patches": []
}