{
  "id": "strike-sqs-service-secure-ts",
  "name": "sqs service secure ts",
  "version": "0.1.0",
  "stack": [
    "sqs",
    "ts"
  ],
  "tags": [
    "service",
    "secure",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for sqs service in ts (secure).",
  "params": [
    {
      "name": "app_name",
      "default": "sqs-service-app"
    }
  ],
  "files": [
    {
      "path": "src/sqs-service.ts",
      "template": "# Spike: sqs service (ts)\n// Auto-generated spike stub for sqs (service)\nexport function demo() {\n  console.log('use sqs - service (secure)');\n}\n"
    },
    {
      "path": "src/aws/sqs.ts",
      "template": "import { SQSClient, SendMessageCommand, ReceiveMessageCommand, DeleteMessageCommand } from '@aws-sdk/client-sqs';\nconst client = new SQSClient({});\nexport async function send(queueUrl: string, body: string){ await client.send(new SendMessageCommand({ QueueUrl: queueUrl, MessageBody: body })); }\nexport async function receive(queueUrl: string){ const out = await client.send(new ReceiveMessageCommand({ QueueUrl: queueUrl, MaxNumberOfMessages: 1 })); const msg = out.Messages?.[0]; if(msg){ await client.send(new DeleteMessageCommand({ QueueUrl: queueUrl, ReceiptHandle: msg.ReceiptHandle! })); return msg.Body; } return undefined; }\n"
    },
    {
      "path": "spikes/strike-sqs-service-secure-ts.ts.txt",
      "template": "# Spike: sqs service (ts)\n// Auto-generated spike stub for sqs (service)\nexport function demo() {\n  console.log('use sqs - service (secure)');\n}\n"
    },
    {
      "path": "spikes/strike-sqs-service-secure-ts.md",
      "template": "# sqs service (secure, ts)\n\nThis is an auto-generated spike template.\n"
    }
  ],
  "patches": []
}