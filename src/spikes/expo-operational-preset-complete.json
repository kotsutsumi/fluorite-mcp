{
  "id": "expo-operational-preset-complete",
  "name": "Expo 運用プリセット 完成版(Links+Tabs+Notify+Routing)",
  "version": "1.0.0",
  "stack": ["expo", "react-native", "react-navigation", "notifications"],
  "tags": ["expo", "navigation", "deeplink", "notifications", "ops"],
  "description": "Deep Links + Tabs + 通知 + payload→ルーティング変換をまとめた完成プリセット。",
  "files": [
    { "path": "utils/notificationToLink.ts", "template": "export type RouteData = { route?: string; params?: Record<string,string|number> };\nexport function notificationToLink(scheme: string, data: RouteData){ const route = data?.route || ''; const params = data?.params || {}; const qp = Object.entries(params).map(([k,v])=> `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join('&'); return scheme.replace(/\\/$/, '') + '/' + route + (qp?`?${qp}`:''); }\n" },
    { "path": "App.tsx", "template": "import React, { useEffect, useState } from 'react';\nimport { NavigationContainer, createNavigationContainerRef } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport * as Linking from 'expo-linking';\nimport { notificationToLink } from './utils/notificationToLink';\nconst Tab = createBottomTabNavigator();\nconst navRef = createNavigationContainerRef<any>();\nfunction A(){ return (<SafeAreaView><Text>Tab A</Text></SafeAreaView>); }\nfunction B(){ return (<SafeAreaView><Text>Tab B</Text></SafeAreaView>); }\nexport default function App(){\n  const scheme = process.env.LINK_SCHEME || 'myapp://';\n  const [perm, setPerm] = useState('unknown');\n  useEffect(()=>{ (async()=>{ const { status } = await Notifications.requestPermissionsAsync(); setPerm(status); })(); },[]);\n  useEffect(()=>{ const sub = Notifications.addNotificationResponseReceivedListener((resp)=>{ const data:any = resp.notification.request.content.data; const link = notificationToLink(scheme, data); if (navRef.isReady()) Linking.openURL(link); }); return ()=> sub.remove(); },[]);\n  useEffect(()=>{ (async()=>{ const initial = await Notifications.getLastNotificationResponseAsync(); if (initial){ const data:any = initial.notification.request.content.data; const link = notificationToLink(scheme, data); const open = ()=> Linking.openURL(link); if (navRef.isReady()) open(); else setTimeout(open, 300); } })(); },[]);\n  const linking = { prefixes: [scheme], config: { screens: { A: 'a', B: 'b' } } };\n  const notify = async ()=>{ await Notifications.scheduleNotificationAsync({ content: { title: 'Go B', body: 'Open B', data: { route: 'b', params: {} } }, trigger: null }); };\n  return (\n    <NavigationContainer linking={linking} ref={navRef}>\n      <Tab.Navigator>\n        <Tab.Screen name=\"A\" component={A} />\n        <Tab.Screen name=\"B\" component={B} options={{ headerRight: ()=> <Button title=\"Notify\" onPress={notify} /> }} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n" },
    { "path": "README.md", "template": "# Expo Ops Preset (Complete)\n\n- Tabs + Deep Links + Notifications + payload→link変換\n- 冷/温起動の両方から遷移（ref readinessに注意）\n- dev/prodでprefixを切替（環境変数）\n" }
  ]
}

