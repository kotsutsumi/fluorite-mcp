{
  "id": "strike-reactflow-hook-testing-ts",
  "name": "reactflow hook testing ts",
  "version": "0.1.0",
  "stack": [
    "reactflow",
    "ts"
  ],
  "tags": [
    "hook",
    "testing",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for reactflow hook in ts (testing).",
  "params": [
    {
      "name": "app_name",
      "default": "reactflow-hook-app"
    }
  ],
  "files": [
    {
      "path": "src/reactflow-hook.ts",
      "template": "# Spike: reactflow hook (ts)\n// Auto-generated spike stub for reactflow (hook)\nexport function demo() {\n  console.log('use reactflow - hook (testing)');\n}\n"
    },
    {
      "path": "src/flow/useFlowState.ts",
      "template": "import { useCallback } from 'react';\nimport { useNodesState, useEdgesState, addEdge } from 'reactflow';\nexport function useFlowState(initialNodes = [], initialEdges = []){\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback((params: any) => setEdges((eds: any) => addEdge(params, eds)), [setEdges]);\n  return { nodes, setNodes, onNodesChange, edges, setEdges, onEdgesChange, onConnect };\n}\n"
    },
    {
      "path": "spikes/strike-reactflow-hook-testing-ts.ts.txt",
      "template": "# Spike: reactflow hook (ts)\n// Auto-generated spike stub for reactflow (hook)\nexport function demo() {\n  console.log('use reactflow - hook (testing)');\n}\n"
    },
    {
      "path": "spikes/strike-reactflow-hook-testing-ts.md",
      "template": "# reactflow hook (testing, ts)\n\nThis is an auto-generated spike template.\n"
    },
    {
      "path": "spikes/strike-reactflow-hook-testing-ts.test.ts",
      "template": "describe('demo', ()=>{ it('works', ()=>{ expect(true).toBe(true); }); });\n"
    }
  ],
  "patches": []
}