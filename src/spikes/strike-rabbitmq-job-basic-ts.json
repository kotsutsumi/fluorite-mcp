{
  "id": "strike-rabbitmq-job-basic-ts",
  "name": "rabbitmq job basic ts",
  "version": "0.1.0",
  "stack": [
    "rabbitmq",
    "ts"
  ],
  "tags": [
    "job",
    "basic",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for rabbitmq job in ts (basic).",
  "params": [
    {
      "name": "app_name",
      "default": "rabbitmq-job-app"
    }
  ],
  "files": [
    {
      "path": "src/rabbitmq-job.ts",
      "template": "# Spike: rabbitmq job (ts)\n// Auto-generated spike stub for rabbitmq (job)\nexport function demo() {\n  console.log('use rabbitmq - job (basic)');\n}\n"
    },
    {
      "path": "src/rabbitmq/publisher.ts",
      "template": "import amqplib from 'amqplib';\nexport async function publish(queue: string, msg: string){ const conn = await amqplib.connect('amqp://localhost'); const ch = await conn.createChannel(); await ch.assertQueue(queue); ch.sendToQueue(queue, Buffer.from(msg)); await ch.close(); await conn.close(); }\n"
    },
    {
      "path": "src/rabbitmq/consumer.ts",
      "template": "import amqplib from 'amqplib';\nexport async function consume(queue: string){ const conn = await amqplib.connect('amqp://localhost'); const ch = await conn.createChannel(); await ch.assertQueue(queue); await ch.consume(queue, (msg)=>{ if(msg){ console.log(msg.content.toString()); ch.ack(msg); } }); }\n"
    },
    {
      "path": "spikes/strike-rabbitmq-job-basic-ts.ts.txt",
      "template": "# Spike: rabbitmq job (ts)\n// Auto-generated spike stub for rabbitmq (job)\nexport function demo() {\n  console.log('use rabbitmq - job (basic)');\n}\n"
    },
    {
      "path": "spikes/strike-rabbitmq-job-basic-ts.md",
      "template": "# rabbitmq job (basic, ts)\n\nThis is an auto-generated spike template.\n"
    }
  ],
  "patches": []
}