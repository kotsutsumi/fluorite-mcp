{
  "id": "expo-operational-preset-minimal",
  "name": "Expo 運用プリセット(Links+Tabs+Notify) 最小",
  "version": "1.0.0",
  "stack": ["expo", "react-native", "react-navigation"],
  "tags": ["mobile", "expo", "navigation", "deeplink", "notifications"],
  "description": "Deep Links + Tabs ナビゲーション + 通知権限/通知を一体化した最小運用プリセット。",
  "params": [{ "name": "app_name", "default": "expo-op" }],
  "files": [
    { "path": "{{app_name}}/App.tsx", "template": "import React, { useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nconst Tab = createBottomTabNavigator();\nfunction A(){ return (<SafeAreaView><Text>Tab A</Text></SafeAreaView>); }\nfunction B(){ return (<SafeAreaView><Text>Tab B</Text></SafeAreaView>); }\nexport default function App(){\n  const [perm, setPerm] = useState('unknown');\n  useEffect(()=>{ (async()=>{ const { status } = await Notifications.requestPermissionsAsync(); setPerm(status); })(); },[]);\n  const notify = async ()=>{ await Notifications.scheduleNotificationAsync({ content: { title: 'Hello', body: 'From Expo' }, trigger: null }); };\n  const prefixes = (process.env.LINK_PREFIXES || 'exp://localhost:19000,myapp://').split(',');\n  const linking = { prefixes, config: { screens: { A: 'a', B: 'b' } } };\n  return (\n    <NavigationContainer linking={linking}>\n      <Tab.Navigator>\n        <Tab.Screen name=\"A\" component={A} />\n        <Tab.Screen name=\"B\" component={B} options={{ headerRight: ()=> <Button title=\"Notify\" onPress={notify} /> }} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n" }
  ]
}

