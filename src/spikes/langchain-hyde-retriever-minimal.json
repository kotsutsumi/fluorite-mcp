{
  "id": "langchain-hyde-retriever-minimal",
  "name": "LangChain HYDE Retriever Minimal (Node)",
  "version": "1.0.0",
  "stack": ["node", "langchain", "openai"],
  "tags": ["rag", "hyde"],
  "description": "Generate a hypothetical answer (HYDE) and use it to improve retrieval.",
  "params": [{ "name": "app_name", "default": "lc-hyde" }],
  "files": [
    { "path": "{{app_name}}/index.mjs", "template": "import { OpenAIEmbeddings, ChatOpenAI } from '@langchain/openai';\nimport { MemoryVectorStore } from 'langchain/vectorstores/memory';\nconst docs = [{ pageContent: 'fluorite mcp serves spike templates for many stacks' }, { pageContent: 'vector databases enable semantic search' }];\nconst embeddings = new OpenAIEmbeddings({ apiKey: process.env.OPENAI_API_KEY });\nconst store = await MemoryVectorStore.fromDocuments(docs, embeddings);\nconst llm = new ChatOpenAI({ apiKey: process.env.OPENAI_API_KEY });\nconst query = 'What does fluorite mcp provide?';\nconst hyde = await llm.invoke(`Write a short answer to: ${query}`);\nconst retrieved = await store.similaritySearch(String(hyde.content), 2);\nconsole.log(retrieved.map(r=>r.pageContent));\n" },
    { "path": "{{app_name}}/package.json", "template": "{ \"name\": \"{{app_name}}\", \"type\": \"module\", \"private\": true, \"dependencies\": { \"@langchain/openai\": \"latest\", \"langchain\": \"latest\" } }\n" },
    { "path": "{{app_name}}/.env.example", "template": "OPENAI_API_KEY=sk-...\n" }
  ],
  "patches": []
}

