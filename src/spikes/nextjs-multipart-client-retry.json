{
  "id": "nextjs-multipart-client-retry",
  "name": "Next.js Multipart Client with Retries",
  "version": "1.0.0",
  "stack": ["nextjs", "aws-s3"],
  "tags": ["storage", "multipart"],
  "description": "Client page uploading parts with simple retry on failure.",
  "params": [{ "name": "app_name", "default": "next-app" }, { "name": "retries", "default": "3" }],
  "files": [
    { "path": "{{app_name}}/app/upload-retry/page.tsx", "template": "'use client'; export default function Page(){ async function onFile(e){ const f = e.target.files[0]; if(!f) return; const { uploadId } = await fetch('/api/s3-multipart/init', { method:'POST' }).then(r=>r.json()); const partSize = 5*1024*1024; const parts=[]; for(let pn=1, off=0; off<f.size; pn++, off+=partSize){ const blob = f.slice(off, off+partSize); const { url } = await fetch(`/api/s3-multipart/part?uploadId=${uploadId}&partNumber=${pn}`).then(r=>r.json()); let attempt=0, etag=null; while(attempt<{{retries}} && !etag){ attempt++; try{ const res = await fetch(url, { method:'PUT', body: blob }); if(!res.ok) throw new Error('upload failed'); etag = res.headers.get('etag')?.replaceAll('"',''); } catch(e){ if(attempt>= {{retries}}) throw e; await new Promise(r=>setTimeout(r, 200*attempt)); } } parts.push({ PartNumber: pn, ETag: etag }); } await fetch('/api/s3-multipart/complete', { method:'POST', body: JSON.stringify({ uploadId, parts }), headers:{ 'content-type':'application/json' } }); alert('uploaded'); } return (<main><input type='file' onChange={onFile}/></main>); }\n" }
  ],
  "patches": []
}

