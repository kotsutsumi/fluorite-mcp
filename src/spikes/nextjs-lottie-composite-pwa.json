{
  "id": "nextjs-lottie-composite-pwa",
  "name": "Next.js Lottie 複合デモ + PWA 最小",
  "version": "1.0.0",
  "stack": ["nextjs", "react", "lottie", "pwa"],
  "tags": ["nextjs", "lottie", "composite", "pwa", "manifest"],
  "description": "Intersection/進捗/速度/セグメントの複合デモにmanifestとSW登録を組み合わせた最小構成。",
  "params": [
    { "name": "lottie_url", "default": "https://assets9.lottiefiles.com/packages/lf20_5ngs2ksb.json" }
  ],
  "files": [
    { "path": "public/manifest.json", "template": "{\n  \"name\": \"Lottie Composite\",\n  \"short_name\": \"Composite\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffffff\",\n  \"theme_color\": \"#0ea5e9\",\n  \"icons\": []\n}\n" },
    { "path": "public/sw-basic.js", "template": "self.addEventListener('install', e=> self.skipWaiting()); self.addEventListener('activate', e=> self.clients.claim());" },
    { "path": "app/lottie-pro/page.tsx", "template": "'use client';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Lottie, { LottieRefCurrentProps } from 'lottie-react';\nexport default function Page(){\n  const lottieRef = useRef<LottieRefCurrentProps>(null);\n  const holderRef = useRef<HTMLDivElement>(null);\n  const [data, setData] = useState<any | null>(null);\n  const url = process.env.NEXT_PUBLIC_LOTTIE_URL || '{{lottie_url}}';\n  useEffect(() => { let alive = true; fetch(url).then(r => r.json()).then(json => { if (alive) setData(json); }); return () => { alive = false; }; }, [url]);\n  useEffect(() => { if (!holderRef.current) return; const el = holderRef.current; const obs = new IntersectionObserver((entries) => { const e = entries[0]; if (e?.isIntersecting) lottieRef.current?.play?.(); else lottieRef.current?.pause?.(); }, { threshold: 0.25 }); obs.observe(el); return () => obs.disconnect(); }, []);\n  useEffect(() => { let lastY = window.scrollY; let lastT = performance.now(); let raf = 0; const clamp=(v,min,max)=>Math.max(min,Math.min(max,v)); const onScroll=()=>{ cancelAnimationFrame(raf); raf=requestAnimationFrame(()=>{ const nowY=window.scrollY; const nowT=performance.now(); const dy=Math.abs(nowY-lastY); const dt=Math.max(1, nowT-lastT); const pxPerMs=dy/dt; const speed=clamp(pxPerMs*8,0.2,3); (lottieRef.current as any)?.setSpeed?.(speed); lastY=nowY; lastT=nowT; const doc=document.documentElement; const max=(doc.scrollHeight-doc.clientHeight)||1; const progress=clamp(doc.scrollTop/max,0,1); const total=(lottieRef.current as any)?.getDuration?.(true)||300; const frame=Math.floor(total*progress); (lottieRef.current as any)?.goToAndStop?.(frame,true); }); }; window.addEventListener('scroll', onScroll, { passive: true }); return () => { cancelAnimationFrame(raf); window.removeEventListener('scroll', onScroll as any); }; }, []);\n  const jump = (frame: number) => { (lottieRef.current as any)?.goToAndPlay?.(frame, true); };\n  return (\n    <main style={{ fontFamily: 'sans-serif' }}>\n      <link rel=\"manifest\" href=\"/manifest.json\"/>\n      <section style={{ height: '120vh', display: 'grid', placeItems: 'center' }}><h1>Lottie Composite Demo (PWA)</h1></section>\n      <section style={{ minHeight: '80vh', display: 'grid', placeItems: 'center' }}>\n        <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>\n          <button onClick={() => jump(0)}>Intro</button>\n          <button onClick={() => jump(60)}>Main</button>\n          <button onClick={() => jump(120)}>Outro</button>\n        </div>\n        <div ref={holderRef} style={{ width: 360, height: 360, border: '1px solid #ddd', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          {data ? (<Lottie lottieRef={lottieRef} animationData={data} loop autoplay={false} style={{ width: 360, height: 360 }} />) : 'Loading...'}\n        </div>\n      </section>\n      <div style={{ height: '120vh' }} />\n    </main>\n  );\n}\n" },
    { "path": "app/sw-register/page.tsx", "template": "'use client';\nimport React, { useEffect } from 'react';\nexport default function Page(){ useEffect(()=>{ if('serviceWorker' in navigator){ navigator.serviceWorker.register('/sw-basic.js'); } },[]); return (<main style={{ fontFamily:'sans-serif', padding:24 }}><h1>SW Registered</h1></main>); }" }
  ]
}

