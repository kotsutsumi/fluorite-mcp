{
  "id": "strike-kafka-client-testing-ts",
  "name": "kafka client testing ts",
  "version": "0.1.0",
  "stack": [
    "kafka",
    "ts"
  ],
  "tags": [
    "client",
    "testing",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for kafka client in ts (testing).",
  "params": [
    {
      "name": "app_name",
      "default": "kafka-client-app"
    }
  ],
  "files": [
    {
      "path": "src/kafka-client.ts",
      "template": "# Spike: kafka client (ts)\n// Auto-generated spike stub for kafka (client)\nexport function demo() {\n  console.log('use kafka - client (testing)');\n}\n"
    },
    {
      "path": "src/kafka/producer.ts",
      "template": "import { Kafka } from 'kafkajs';\nconst kafka = new Kafka({ clientId: 'app', brokers: ['localhost:9092'] });\nexport async function produce(topic: string, message: string){ const p = kafka.producer(); await p.connect(); await p.send({ topic, messages: [{ value: message }] }); await p.disconnect(); }\n"
    },
    {
      "path": "src/kafka/consumer.ts",
      "template": "import { Kafka } from 'kafkajs';\nconst kafka = new Kafka({ clientId: 'app', brokers: ['localhost:9092'] });\nexport async function consume(topic: string){ const c = kafka.consumer({ groupId: 'group' }); await c.connect(); await c.subscribe({ topic, fromBeginning: true }); await c.run({ eachMessage: async ({ message }) => console.log(message.value?.toString()) }); }\n"
    },
    {
      "path": "spikes/strike-kafka-client-testing-ts.ts.txt",
      "template": "# Spike: kafka client (ts)\n// Auto-generated spike stub for kafka (client)\nexport function demo() {\n  console.log('use kafka - client (testing)');\n}\n"
    },
    {
      "path": "spikes/strike-kafka-client-testing-ts.md",
      "template": "# kafka client (testing, ts)\n\nThis is an auto-generated spike template.\n"
    },
    {
      "path": "spikes/strike-kafka-client-testing-ts.test.ts",
      "template": "describe('demo', ()=>{ it('works', ()=>{ expect(true).toBe(true); }); });\n"
    }
  ],
  "patches": []
}