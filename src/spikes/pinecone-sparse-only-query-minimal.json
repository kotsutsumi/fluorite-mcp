{
  "id": "pinecone-sparse-only-query-minimal",
  "name": "Pinecone Sparse-Only Query Minimal (Node)",
  "version": "1.0.0",
  "stack": ["node", "pinecone"],
  "tags": ["vector", "sparse"],
  "description": "Query Pinecone using sparseVector without dense vector.",
  "params": [
    { "name": "app_name", "default": "pinecone-sparse-only" },
    { "name": "pinecone_index", "default": "docs" }
  ],
  "files": [
    { "path": "{{app_name}}/index.mjs", "template": "import { Pinecone } from '@pinecone-database/pinecone';\nconst pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY });\nconst index = pc.Index(process.env.PINECONE_INDEX || '{{pinecone_index}}');\nawait index.upsert([{ id: '1', values: [0,0,0], sparseValues: { indices: [1,3], values: [0.8,0.2] }, metadata: { text: 'hello' } }]);\nconst res = await index.query({ topK: 3, includeMetadata: true, sparseVector: { indices: [1], values: [1.0] } });\nconsole.log(res.matches?.map(m => m.metadata?.text));\n" },
    { "path": "{{app_name}}/package.json", "template": "{ \"name\": \"{{app_name}}\", \"type\": \"module\", \"private\": true, \"dependencies\": { \"@pinecone-database/pinecone\": \"latest\" } }\n" },
    { "path": "{{app_name}}/.env.example", "template": "PINECONE_API_KEY=...\nPINECONE_INDEX={{pinecone_index}}\n" }
  ],
  "patches": []
}

