{
  "id": "strike-trpc-service-secure-py",
  "name": "trpc service secure py",
  "version": "0.1.0",
  "stack": [
    "trpc",
    "py"
  ],
  "tags": [
    "service",
    "secure",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for trpc service in py (secure).",
  "params": [
    {
      "name": "app_name",
      "default": "trpc-service-app"
    }
  ],
  "files": [
    {
      "path": "src/trpc-service.py",
      "template": "# Spike: trpc service (py)\n# Auto-generated spike stub for trpc (service)\ndef demo():\n    print('use trpc - service (secure)')\n"
    },
    {
      "path": "src/trpc/context.ts",
      "template": "export type Context = {};\nexport async function createContext(): Promise<Context> { return {}; }\n"
    },
    {
      "path": "src/trpc/router.ts",
      "template": "import { initTRPC } from '@trpc/server';\nconst t = initTRPC.context<{}>().create();\nexport const appRouter = t.router({ hello: t.procedure.query(()=> 'world') });\nexport type AppRouter = typeof appRouter;\n"
    },
    {
      "path": "src/trpc/server.ts",
      "template": "import { createHTTPServer } from '@trpc/server/adapters/standalone';\nimport { appRouter } from './router';\nconst server = createHTTPServer({ router: appRouter });\nserver.listen(20222);\n"
    },
    {
      "path": "spikes/strike-trpc-service-secure-py.py.txt",
      "template": "# Spike: trpc service (py)\n# Auto-generated spike stub for trpc (service)\ndef demo():\n    print('use trpc - service (secure)')\n"
    },
    {
      "path": "spikes/strike-trpc-service-secure-py.md",
      "template": "# trpc service (secure, py)\n\nThis is an auto-generated spike template.\n"
    }
  ],
  "patches": []
}