{
  "id": "langchain-redis-vector-minimal",
  "name": "LangChain RedisVectorStore Minimal (Node)",
  "version": "1.0.0",
  "stack": ["node", "langchain", "redis", "openai"],
  "tags": ["rag", "vector"],
  "description": "Use LangChain RedisVectorStore with OpenAI embeddings for similarity search.",
  "params": [
    { "name": "app_name", "default": "lc-redis-vector" },
    { "name": "redis_url", "default": "redis://localhost:6379" }
  ],
  "files": [
    { "path": "{{app_name}}/index.mjs", "template": "import { OpenAIEmbeddings } from '@langchain/openai';\nimport { RedisVectorStore } from '@langchain/redis';\nimport { createClient } from 'redis';\nconst client = createClient({ url: process.env.REDIS_URL || '{{redis_url}}' });\nawait client.connect();\nconst embeddings = new OpenAIEmbeddings({ apiKey: process.env.OPENAI_API_KEY });\nconst store = await RedisVectorStore.fromTexts(['hello world', 'fluorite mcp spike'], [{ id: '1' }, { id: '2' }], embeddings, { indexName: 'docs', redisClient: client });\nconst res = await store.similaritySearch('fluorite', 2);\nconsole.log(res.map(r => r.pageContent));\nawait client.quit();\n" },
    { "path": "{{app_name}}/package.json", "template": "{ \"name\": \"{{app_name}}\", \"type\": \"module\", \"private\": true, \"dependencies\": { \"@langchain/openai\": \"latest\", \"@langchain/redis\": \"latest\", \"redis\": \"latest\" } }\n" },
    { "path": "{{app_name}}/.env.example", "template": "OPENAI_API_KEY=sk-...\nREDIS_URL={{redis_url}}\n" }
  ],
  "patches": []
}

