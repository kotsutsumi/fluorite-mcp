{
  "id": "qdrant-filter-query-minimal",
  "name": "Qdrant Filtered Query (Node)",
  "version": "1.0.0",
  "stack": ["node", "qdrant"],
  "tags": ["vector", "filter"],
  "description": "Search with metadata filter conditions in Qdrant.",
  "params": [
    { "name": "app_name", "default": "qdrant-filter-app" },
    { "name": "qdrant_url", "default": "http://localhost:6333" },
    { "name": "qdrant_collection", "default": "documents" }
  ],
  "files": [
    {
      "path": "{{app_name}}/index.mjs",
      "template": "import { QdrantClient } from '@qdrant/js-client-rest';\nconst client = new QdrantClient({ url: process.env.QDRANT_URL || '{{qdrant_url}}' });\nconst collection = process.env.QDRANT_COLLECTION || '{{qdrant_collection}}';\nawait client.upsert(collection, { points: [\n  { id: '1', vector: [0.1,0.2,0.3], payload: { tag: 'a', text: 'hello' } },\n  { id: '2', vector: [0.2,0.1,0.25], payload: { tag: 'b', text: 'fluorite' } }\n] });\nconst res = await client.search(collection, { vector: [0.1,0.2,0.3], limit: 3, filter: { must: [{ key: 'tag', match: { value: 'a' } }] } });\nconsole.log(res.map(p => p.payload?.text));\n"
    },
    { "path": "{{app_name}}/package.json", "template": "{ \"name\": \"{{app_name}}\", \"type\": \"module\", \"private\": true, \"dependencies\": { \"@qdrant/js-client-rest\": \"latest\" } }\n" },
    { "path": "{{app_name}}/.env.example", "template": "QDRANT_URL=http://localhost:6333\nQDRANT_COLLECTION={{qdrant_collection}}\n" }
  ],
  "patches": []
}

