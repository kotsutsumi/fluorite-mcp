{
  "id": "strike-prisma-service-typed-ts",
  "name": "prisma service typed ts",
  "version": "0.1.0",
  "stack": [
    "prisma",
    "ts"
  ],
  "tags": [
    "service",
    "typed",
    "generated",
    "strike"
  ],
  "description": "Auto-generated spike for prisma service in ts (typed).",
  "params": [
    {
      "name": "app_name",
      "default": "prisma-service-app"
    }
  ],
  "files": [
    {
      "path": "src/prisma-service.ts",
      "template": "# Spike: prisma service (ts)\n// Auto-generated spike stub for prisma (service)\nexport function demo() {\n  console.log('use prisma - service (typed)');\n}\n"
    },
    {
      "path": "src/prisma.ts",
      "template": "import { PrismaClient } from '@prisma/client';\nexport const prisma = new PrismaClient();\n"
    },
    {
      "path": "prisma/schema.prisma",
      "template": "datasource db { provider = \"postgresql\" url = env(\"DATABASE_URL\") }\ngenerator client { provider = \"prisma-client-js\" }\nmodel User { id Int @id @default(autoincrement()) email String @unique name String? createdAt DateTime @default(now()) }\n"
    },
    {
      "path": "src/user.service.ts",
      "template": "import { prisma } from './prisma';\nexport async function createUserWithTx(email: string){\n  return await prisma.$transaction(async (tx)=>{\n    const user = await tx.user.create({ data: { email } });\n    return user;\n  });\n}\n"
    },
    {
      "path": "src/db/client.ts",
      "template": "import { PrismaClient } from '@prisma/client';\nexport const prisma = new PrismaClient();\n"
    },
    {
      "path": "spikes/strike-prisma-service-typed-ts.ts.txt",
      "template": "# Spike: prisma service (ts)\n// Auto-generated spike stub for prisma (service)\nexport function demo() {\n  console.log('use prisma - service (typed)');\n}\n"
    },
    {
      "path": "spikes/strike-prisma-service-typed-ts.md",
      "template": "# prisma service (typed, ts)\n\nThis is an auto-generated spike template.\n"
    }
  ],
  "patches": []
}