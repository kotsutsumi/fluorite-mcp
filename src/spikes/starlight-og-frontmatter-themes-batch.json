{
  "id": "starlight-og-frontmatter-themes-batch",
  "name": "Starlight OG前書きテーマ一括生成 最小",
  "version": "1.0.0",
  "stack": ["astro", "starlight", "image"],
  "tags": ["docs", "og", "image", "sharp", "frontmatter", "starlight"],
  "description": "各ページのfrontmatter(ogTitle/ogPrimary/ogSecondary/ogFont)を使用して public/og/ にOG画像を一括生成。",
  "params": [
    { "name": "app_name", "default": "starlight-og-frontmatter" },
    { "name": "title", "default": "My Starlight Docs" },
    { "name": "site_url", "default": "https://example.com" }
  ],
  "files": [
    { "path": "{{app_name}}/package.json", "template": "{\n  \"name\": \"{{app_name}}\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": { \"dev\": \"astro dev\", \"build\": \"astro build\", \"preview\": \"astro preview\", \"og:gen\": \"node scripts/generate-og-frontmatter.mjs\" },\n  \"devDependencies\": { \"astro\": \"latest\", \"@astrojs/starlight\": \"latest\", \"sharp\": \"latest\" }\n}\n" },
    { "path": "{{app_name}}/astro.config.mjs", "template": "import { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\nexport default defineConfig({\n  site: '{{site_url}}',\n  integrations: [ starlight({ title: '{{title}}', sidebar: [{ label: 'Introduction', autogenerate: { directory: 'docs' } }] }) ]\n});\n" },
    { "path": "{{app_name}}/scripts/generate-og-frontmatter.mjs", "template": "import fs from 'node:fs/promises';\nimport path from 'node:path';\nimport sharp from 'sharp';\nconst ROOT = process.cwd();\nconst DOCS = path.join(ROOT, 'src', 'content', 'docs');\nconst OUT = path.join(ROOT, 'public', 'og');\nasync function* walk(dir){ for (const ent of await fs.readdir(dir, { withFileTypes:true })) { const p = path.join(dir, ent.name); if (ent.isDirectory()) yield* walk(p); else if (/\\.(md|mdx)$/i.test(ent.name)) yield p; } }\nfunction parseFrontmatter(txt){ const m = txt.match(/^---\n([\\s\\S]*?)\n---/); if (!m) return {}; const res={}; for (const line of m[1].split(/\n/)) { const k=line.split(':')[0]?.trim(); const v=line.slice((k||'').length+1).trim(); if(k) res[k]=v?.replace(/^['\"']|['\"']$/g,''); } return res; }\nasync function genOne(rel, fm){ const title=fm.ogTitle||fm.title||rel; const primary=fm.ogPrimary||'#0ea5e9'; const secondary=fm.ogSecondary||'#1e293b'; const font=fm.ogFont||'system-ui, -apple-system, Segoe UI, Roboto'; const svg = `<!DOCTYPE svg><svg width=\\\"1200\\\" height=\\\"630\\\" viewBox=\\\"0 0 1200 630\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><defs><linearGradient id=\\\"g\\\" x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"1\\\" y2=\\\"1\\\"><stop offset=\\\"0\\\" stop-color=\\\"${primary}\\\"/><stop offset=\\\"1\\\" stop-color=\\\"${secondary}\\\"/></linearGradient></defs><rect width=\\\"1200\\\" height=\\\"630\\\" fill=\\\"url(#g)\\\"/><text x=\\\"60\\\" y=\\\"360\\\" font-family=\\\"${font}\\\" font-size=\\\"72\\\" fill=\\\"#fff\\\">${title}</text></svg>`; const outPath = path.join(OUT, rel.replace(/\\.(md|mdx)$/i,'') + '.png'); await fs.mkdir(path.dirname(outPath), { recursive: true }); await sharp(Buffer.from(svg)).png().toFile(outPath); }\nconst tasks=[]; for await (const p of walk(DOCS)) { const rel=path.relative(DOCS,p); const txt=await fs.readFile(p,'utf8'); const fm=parseFrontmatter(txt); tasks.push(genOne(rel, fm)); } await Promise.all(tasks); console.log('OG frontmatter batch generated');\n" },
    { "path": "{{app_name}}/src/content/docs/index.mdx", "template": "---\ntitle: Introduction\nogTitle: Welcome\nogPrimary: '#22c55e'\nogSecondary: '#111827'\n---\n\n# {{title}}\n\n<meta property=\"og:image\" content=\"/og/index.png\"/>\n\n> frontmatterの `og*` を参照してOG画像を生成します。\n" }
  ]
}

