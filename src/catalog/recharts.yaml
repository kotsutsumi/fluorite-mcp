id: "recharts"
name: "Recharts"
homepage: "https://recharts.org/en-US/guide/getting-started"
npm: "recharts"
summary: "React 専用のコンポーネントベース・チャートライブラリ。宣言的な API と豊富なプリミティブ（LineChart/BarChart/PieChart 等）で迅速に可視化を構築できる。"
install:
  steps:
    - "npm i recharts"
peerDependencies:
  - react
  - react-dom
api:
  components:
    - "<ResponsiveContainer>                        // 親サイズにフィット"
    - "<LineChart>/<BarChart>/<AreaChart>/<ComposedChart>/<PieChart>"
    - "<Line>/<Bar>/<Area>/<Pie>"
    - "<XAxis>/<YAxis>/<CartesianGrid>/<Tooltip>/<Legend>/<ReferenceLine>"
  propsNotes:
    - "data: Array<Record<string, any>>（グラフ共通）"
    - "dataKey: string | (datum) => value（各 Series や XAxis などで使用）"
    - "type: 'monotone' | 'linear'（Line などの補間）"
usage:
  basicLine: |
    import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'

    const data = [
      { name: 'Jan', uv: 400, pv: 240 },
      { name: 'Feb', uv: 300, pv: 139 },
      { name: 'Mar', uv: 200, pv: 980 },
    ]

    export default function Example() {
      return (
        <div style={{ width: '100%', height: 300 }}>
          <ResponsiveContainer>
            <LineChart data={data} margin={{ top: 8, right: 16, bottom: 8, left: 0 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="uv" stroke="#8884d8" />
              <Line type="monotone" dataKey="pv" stroke="#82ca9d" />
            </LineChart>
          </ResponsiveContainer>
        </div>
      )
    }
  composedChart: |
    import { ResponsiveContainer, ComposedChart, Line, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'

    const data = [
      { name: 'A', sales: 2400, profit: 240 },
      { name: 'B', sales: 1398, profit: 221 },
    ]

    export function Composed() {
      return (
        <div style={{ width: '100%', height: 320 }}>
          <ResponsiveContainer>
            <ComposedChart data={data}>
              <CartesianGrid stroke="#f5f5f5" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="sales" barSize={20} fill="#413ea0" />
              <Line type="monotone" dataKey="profit" stroke="#ff7300" />
            </ComposedChart>
          </ResponsiveContainer>
        </div>
      )
    }
  customTooltip: |
    import { TooltipProps } from 'recharts'

    const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {
      if (!active || !payload?.length) return null
      return (
        <div style={{ background: 'white', border: '1px solid #ddd', padding: 8 }}>
          <div>{label}</div>
          {payload.map((p) => (
            <div key={p.dataKey as string} style={{ color: p.color }}>{p.name}: {p.value}</div>
          ))}
        </div>
      )
    }

    // 使い方: <Tooltip content={<CustomTooltip />} />
bestPractices:
  - "親の幅/高さに追随させるため <ResponsiveContainer> を積極的に使用"
  - "dataKey は安定したキー文字列を用い、インライン関数の過剰生成を避ける"
  - "大量データでは点数/アニメーションを抑え、描画負荷を軽減"
  - "フォーマッタ（tickFormatter, labelFormatter）でドメインに応じた表示を実装"
notes:
  - "Next.js ではクライアントコンポーネントでレンダリング（window 参照を含む場合）。必要に応じて dynamic import"
  - "SVG ベースのため、モバイルでのパフォーマンス設計に留意（必要ならサンプリング）"
references:
  - "Getting Started: https://recharts.org/en-US/guide/getting-started"
  - "Components: https://recharts.org/en-US/api"
  - "Examples: https://recharts.org/en-US/examples"
license: "MIT"
lastReviewed: "2025-08-14"

