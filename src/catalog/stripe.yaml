id: "stripe"
name: "Stripe"
version: "^14.0.0"
homepage: "https://stripe.com"
github: "https://github.com/stripe/stripe-node"
npm: "stripe"
summary: "Complete payment processing platform with APIs for payments, subscriptions, invoicing, and financial services."
description: |
  Stripe is a comprehensive payment processing platform that enables businesses to accept payments,
  manage subscriptions, and handle complex billing scenarios. It provides robust APIs for payment processing,
  subscription management, invoicing, and financial services. Features include support for 135+ currencies,
  PCI compliance, fraud prevention, and extensive webhook support for real-time events.
tags:
  - payments
  - subscriptions
  - billing
  - e-commerce
  - fintech
  - typescript
  - webhooks

install:
  npm: |
    npm install stripe
    # For React components (optional)
    npm install @stripe/stripe-js @stripe/react-stripe-js
  yarn: |
    yarn add stripe
    yarn add @stripe/stripe-js @stripe/react-stripe-js
  pnpm: |
    pnpm add stripe
    pnpm add @stripe/stripe-js @stripe/react-stripe-js

dependencies:
  required:
    "stripe": "^14.0.0"
  optional:
    "@stripe/stripe-js": "^2.0.0"
    "@stripe/react-stripe-js": "^2.0.0"
    "@stripe/nextjs": "^0.5.0"

api:
  core:
    Stripe:
      description: "Main Stripe SDK class"
      initialization: "new Stripe(secretKey, options)"
      
    resources:
      customers:
        - "create(params): Create customer"
        - "retrieve(id): Get customer"
        - "update(id, params): Update customer"
        - "list(params): List customers"
      
      paymentIntents:
        - "create(params): Create payment intent"
        - "confirm(id): Confirm payment"
        - "capture(id): Capture payment"
        - "cancel(id): Cancel payment"
      
      subscriptions:
        - "create(params): Create subscription"
        - "update(id, params): Update subscription"
        - "cancel(id): Cancel subscription"
        - "list(params): List subscriptions"
      
      products:
        - "create(params): Create product"
        - "update(id, params): Update product"
        - "list(params): List products"
      
      prices:
        - "create(params): Create price"
        - "update(id, params): Update price"
        - "list(params): List prices"

usage:
  initialization: |
    // lib/stripe.ts - Initialize Stripe
    import Stripe from 'stripe'
    
    export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
      apiVersion: '2023-10-16',
      typescript: true,
    })
    
    // For client-side
    import { loadStripe } from '@stripe/stripe-js'
    
    export const stripePromise = loadStripe(
      process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
    )
  
  checkoutSession: |
    // app/api/checkout/route.ts - Create checkout session
    import { NextRequest, NextResponse } from 'next/server'
    import { stripe } from '@/lib/stripe'
    
    export async function POST(req: NextRequest) {
      try {
        const { priceId, customerId, successUrl, cancelUrl } = await req.json()
        
        const session = await stripe.checkout.sessions.create({
          customer: customerId,
          line_items: [
            {
              price: priceId,
              quantity: 1,
            },
          ],
          mode: 'subscription', // or 'payment' for one-time
          success_url: successUrl,
          cancel_url: cancelUrl,
          allow_promotion_codes: true,
          billing_address_collection: 'required',
          payment_method_types: ['card'],
          metadata: {
            userId: customerId,
          },
        })
        
        return NextResponse.json({ sessionId: session.id })
      } catch (error) {
        console.error('Checkout error:', error)
        return NextResponse.json(
          { error: 'Failed to create checkout session' },
          { status: 500 }
        )
      }
    }
  
  paymentIntent: |
    // app/api/payment-intent/route.ts - Create payment intent
    import { NextRequest, NextResponse } from 'next/server'
    import { stripe } from '@/lib/stripe'
    
    export async function POST(req: NextRequest) {
      try {
        const { amount, currency = 'usd', customerId } = await req.json()
        
        const paymentIntent = await stripe.paymentIntents.create({
          amount: Math.round(amount * 100), // Convert to cents
          currency,
          customer: customerId,
          automatic_payment_methods: {
            enabled: true,
          },
          metadata: {
            orderId: 'order_123',
          },
        })
        
        return NextResponse.json({
          clientSecret: paymentIntent.client_secret,
        })
      } catch (error) {
        console.error('Payment intent error:', error)
        return NextResponse.json(
          { error: 'Failed to create payment intent' },
          { status: 500 }
        )
      }
    }
  
  subscriptionManagement: |
    // app/api/subscriptions/route.ts - Manage subscriptions
    import { NextRequest, NextResponse } from 'next/server'
    import { stripe } from '@/lib/stripe'
    
    // Create subscription
    export async function POST(req: NextRequest) {
      try {
        const { customerId, priceId } = await req.json()
        
        const subscription = await stripe.subscriptions.create({
          customer: customerId,
          items: [{ price: priceId }],
          payment_behavior: 'default_incomplete',
          payment_settings: {
            save_default_payment_method: 'on_subscription',
          },
          expand: ['latest_invoice.payment_intent'],
          trial_period_days: 14,
        })
        
        return NextResponse.json({
          subscriptionId: subscription.id,
          clientSecret: subscription.latest_invoice?.payment_intent?.client_secret,
        })
      } catch (error) {
        return NextResponse.json({ error: error.message }, { status: 500 })
      }
    }
    
    // Cancel subscription
    export async function DELETE(req: NextRequest) {
      try {
        const { subscriptionId } = await req.json()
        
        const subscription = await stripe.subscriptions.update(subscriptionId, {
          cancel_at_period_end: true,
        })
        
        return NextResponse.json({ subscription })
      } catch (error) {
        return NextResponse.json({ error: error.message }, { status: 500 })
      }
    }
  
  webhookHandler: |
    // app/api/webhook/stripe/route.ts - Handle Stripe webhooks
    import { NextRequest, NextResponse } from 'next/server'
    import { stripe } from '@/lib/stripe'
    import { headers } from 'next/headers'
    
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!
    
    export async function POST(req: NextRequest) {
      const body = await req.text()
      const signature = headers().get('stripe-signature')!
      
      let event: Stripe.Event
      
      try {
        event = stripe.webhooks.constructEvent(body, signature, webhookSecret)
      } catch (err) {
        console.error('Webhook signature verification failed:', err)
        return NextResponse.json(
          { error: 'Invalid signature' },
          { status: 400 }
        )
      }
      
      try {
        switch (event.type) {
          case 'checkout.session.completed': {
            const session = event.data.object as Stripe.Checkout.Session
            // Handle successful checkout
            await handleCheckoutComplete(session)
            break
          }
          
          case 'payment_intent.succeeded': {
            const paymentIntent = event.data.object as Stripe.PaymentIntent
            // Handle successful payment
            console.log('Payment succeeded:', paymentIntent.id)
            break
          }
          
          case 'customer.subscription.created':
          case 'customer.subscription.updated': {
            const subscription = event.data.object as Stripe.Subscription
            // Update subscription in database
            await updateSubscription(subscription)
            break
          }
          
          case 'customer.subscription.deleted': {
            const subscription = event.data.object as Stripe.Subscription
            // Handle subscription cancellation
            await handleSubscriptionCanceled(subscription)
            break
          }
          
          case 'invoice.payment_failed': {
            const invoice = event.data.object as Stripe.Invoice
            // Handle failed payment
            await handlePaymentFailed(invoice)
            break
          }
          
          default:
            console.log(`Unhandled event type: ${event.type}`)
        }
        
        return NextResponse.json({ received: true })
      } catch (error) {
        console.error('Webhook handler error:', error)
        return NextResponse.json(
          { error: 'Webhook handler failed' },
          { status: 500 }
        )
      }
    }
    
    async function handleCheckoutComplete(session: Stripe.Checkout.Session) {
      // Update user subscription status in database
      const customerId = session.customer as string
      const subscriptionId = session.subscription as string
      
      // Implementation depends on your database
      console.log('Checkout completed:', { customerId, subscriptionId })
    }
    
    async function updateSubscription(subscription: Stripe.Subscription) {
      // Update subscription details in database
      console.log('Subscription updated:', subscription.id)
    }
    
    async function handleSubscriptionCanceled(subscription: Stripe.Subscription) {
      // Handle subscription cancellation
      console.log('Subscription canceled:', subscription.id)
    }
    
    async function handlePaymentFailed(invoice: Stripe.Invoice) {
      // Notify customer about failed payment
      console.log('Payment failed for invoice:', invoice.id)
    }
  
  reactComponents: |
    // components/checkout-form.tsx - React checkout form
    "use client"
    
    import { useState } from 'react'
    import {
      PaymentElement,
      Elements,
      useStripe,
      useElements,
    } from '@stripe/react-stripe-js'
    import { stripePromise } from '@/lib/stripe-client'
    
    function CheckoutForm() {
      const stripe = useStripe()
      const elements = useElements()
      const [error, setError] = useState<string | null>(null)
      const [processing, setProcessing] = useState(false)
      
      const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault()
        
        if (!stripe || !elements) return
        
        setProcessing(true)
        
        const { error } = await stripe.confirmPayment({
          elements,
          confirmParams: {
            return_url: `${window.location.origin}/payment-success`,
          },
        })
        
        if (error) {
          setError(error.message || 'Payment failed')
          setProcessing(false)
        }
      }
      
      return (
        <form onSubmit={handleSubmit}>
          <PaymentElement />
          {error && (
            <div className="text-red-500 mt-2">{error}</div>
          )}
          <button
            type="submit"
            disabled={!stripe || processing}
            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50"
          >
            {processing ? 'Processing...' : 'Pay now'}
          </button>
        </form>
      )
    }
    
    export function PaymentForm({ clientSecret }: { clientSecret: string }) {
      return (
        <Elements
          stripe={stripePromise}
          options={{
            clientSecret,
            appearance: {
              theme: 'stripe',
              variables: {
                colorPrimary: '#0070f3',
              },
            },
          }}
        >
          <CheckoutForm />
        </Elements>
      )
    }
  
  customerPortal: |
    // app/api/customer-portal/route.ts - Create portal session
    import { NextRequest, NextResponse } from 'next/server'
    import { stripe } from '@/lib/stripe'
    
    export async function POST(req: NextRequest) {
      try {
        const { customerId } = await req.json()
        
        const session = await stripe.billingPortal.sessions.create({
          customer: customerId,
          return_url: `${process.env.NEXT_PUBLIC_APP_URL}/account`,
        })
        
        return NextResponse.json({ url: session.url })
      } catch (error) {
        return NextResponse.json(
          { error: 'Failed to create portal session' },
          { status: 500 }
        )
      }
    }

bestPractices:
  - "Always use webhook events as source of truth"
  - "Implement idempotency keys for critical operations"
  - "Store Stripe IDs in your database for reference"
  - "Use Stripe's test mode for development"
  - "Implement proper error handling and retries"
  - "Secure webhook endpoints with signature verification"
  - "Use metadata to link Stripe objects to your data"
  - "Implement proper logging for debugging"

security:
  features:
    - "PCI DSS compliance"
    - "Webhook signature verification"
    - "3D Secure authentication"
    - "Fraud detection (Radar)"
    - "Tokenization of sensitive data"
  
  recommendations:
    - "Never expose secret keys in client code"
    - "Always verify webhook signatures"
    - "Use HTTPS for all communications"
    - "Implement rate limiting on API endpoints"
    - "Store minimal payment data locally"

patterns:
  payments:
    - "One-time payments with Payment Intents"
    - "Saved payment methods for future use"
    - "Subscription billing with trials"
    - "Usage-based billing"
    - "Split payments and transfers"
  
  subscriptions:
    - "Fixed recurring billing"
    - "Metered/usage-based billing"
    - "Tiered pricing models"
    - "Free trials and discounts"
    - "Proration on plan changes"

troubleshooting:
  commonIssues:
    - issue: "Webhook not receiving events"
      solution: "Check webhook endpoint URL and ensure it's publicly accessible"
    - issue: "Payment declining"
      solution: "Check card details, use Stripe test cards for development"
    - issue: "Subscription not updating"
      solution: "Ensure webhook handlers process subscription events correctly"
    - issue: "CORS errors in browser"
      solution: "Use server-side API routes for Stripe SDK calls"

references:
  documentation: "https://stripe.com/docs"
  apiReference: "https://stripe.com/docs/api"
  testing: "https://stripe.com/docs/testing"
  webhooks: "https://stripe.com/docs/webhooks"
  security: "https://stripe.com/docs/security"
  examples: "https://github.com/stripe/stripe-node/tree/master/examples"

license: "MIT"
author: "Stripe"
maintainers:
  - "Stripe Team"
lastReviewed: "2025-08-14"
metadata:
  npmWeeklyDownloads: "~2000000"
  githubStars: "3500+"
  bundleSize: "~200KB minified + gzipped"
